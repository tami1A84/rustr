{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.96","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.96/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.96/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/app/target/debug/build/proc-macro2-f137583523f83cf2/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.96","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro"],"env":[],"out_dir":"/app/target/debug/build/proc-macro2-345b8297a1abcc80/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libunicode_ident-27b708a2ea44f53b.rlib","/app/target/debug/deps/libunicode_ident-27b708a2ea44f53b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libcfg_if-b090a885f2700b8b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.174/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.174/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","extra_traits","std"],"filenames":["/app/target/debug/build/libc-dfa9c041f6cecf2e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.96","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.96/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.96/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/app/target/debug/deps/libproc_macro2-e5c395cf57c3ef47.rlib","/app/target/debug/deps/libproc_macro2-e5c395cf57c3ef47.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/app/target/debug/build/libc-a89d1a6b3088183d/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","derive","rc","serde_derive","std"],"filenames":["/app/target/debug/build/serde-516f5f42a5982cd2/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/once_cell-1.21.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"once_cell","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/once_cell-1.21.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","race","std"],"filenames":["/app/target/debug/deps/libonce_cell-63d5b3f27b4e174c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/app/target/debug/deps/libquote-b005e2a8b1aea28e.rlib","/app/target/debug/deps/libquote-b005e2a8b1aea28e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.174/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.174/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","extra_traits","std"],"filenames":["/app/target/debug/deps/liblibc-6e0f1850f90f2cbe.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/serde-719170af514ad247/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-1.15.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smallvec","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-1.15.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["const_generics","const_new","union"],"filenames":["/app/target/debug/deps/libsmallvec-8a9450a91f868832.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.104/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.104/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","fold","full","parsing","printing","proc-macro","visit","visit-mut"],"filenames":["/app/target/debug/deps/libsyn-24b97be64fa4bf06.rlib","/app/target/debug/deps/libsyn-24b97be64fa4bf06.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#log@0.4.27","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"log","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/app/target/debug/deps/liblog-13d4bcad0b5f81fc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#autocfg@1.5.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/autocfg-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"autocfg","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/autocfg-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libautocfg-9280f9c2f723f569.rlib","/app/target/debug/deps/libautocfg-9280f9c2f723f569.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shlex-1.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"shlex","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shlex-1.3.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libshlex-83c7e0da01d13271.rlib","/app/target/debug/deps/libshlex-83c7e0da01d13271.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_derive-1.0.219/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_derive","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_derive-1.0.219/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libserde_derive-84881c68fbecb62b.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cc@1.2.32","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cc-1.2.32/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cc","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cc-1.2.32/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libcc-55615d548067e685.rlib","/app/target/debug/deps/libcc-55615d548067e685.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/version_check-0.9.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"version_check","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/version_check-0.9.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libversion_check-a216429c4cbdde93.rlib","/app/target/debug/deps/libversion_check-a216429c4cbdde93.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/build/crossbeam-utils-2e7512e383e7552c/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","derive","rc","serde_derive","std"],"filenames":["/app/target/debug/deps/libserde-012d13ab03917be6.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/crossbeam-utils-7b9bd07d9fad49b5/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-lite-0.2.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_project_lite","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-lite-0.2.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libpin_project_lite-39d1c3577857fa1a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libmemchr-0325c9e8c520c841.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@2.9.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-2.9.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-2.9.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde","std"],"filenames":["/app/target/debug/deps/libbitflags-d9fce451b13022b3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_utils","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libcrossbeam_utils-250510a4114e5a1e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#synstructure@0.13.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synstructure-0.13.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"synstructure","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synstructure-0.13.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/app/target/debug/deps/libsynstructure-69ec8bcc4c7525b7.rlib","/app/target/debug/deps/libsynstructure-69ec8bcc4c7525b7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stable_deref_trait-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stable_deref_trait","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stable_deref_trait-1.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/app/target/debug/deps/libstable_deref_trait-4347dc04a2dcbd5c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerofrom-derive@0.1.6","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-derive-0.1.6/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerofrom_derive","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-derive-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libzerofrom_derive-2054fd5437b6a7dc.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yoke-derive@0.8.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-derive-0.8.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"yoke_derive","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-derive-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libyoke_derive-7d3af094bc4bc5bd.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.16","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/app/target/debug/deps/libgetrandom-18b168a249adb3f5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.11","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slab-0.4.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"slab","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slab-0.4.11/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libslab-c651101d90c6ea11.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerofrom@0.1.6","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerofrom","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive"],"filenames":["/app/target/debug/deps/libzerofrom-dda316155336d079.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerovec-derive@0.11.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-derive-0.11.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerovec_derive","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-derive-0.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libzerovec_derive-2fe45f9a88451b07.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@1.0.8","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","event","fs","net","pipe","process","shm","std","time"],"filenames":["/app/target/debug/build/rustix-1d4d43a593994e06/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-core-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_core","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-core-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libfutures_core-c2656066e240afd5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yoke@0.8.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-0.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"yoke","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive","zerofrom"],"filenames":["/app/target/debug/deps/libyoke-20b7440b3003e2a9.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@1.0.8","linked_libs":[],"linked_paths":[],"cfgs":["static_assertions","linux_raw","linux_like","linux_kernel"],"env":[],"out_dir":"/app/target/debug/build/rustix-b000d0edc18dc753/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#displaydoc@0.2.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/displaydoc-0.2.5/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"displaydoc","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/displaydoc-0.2.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libdisplaydoc-492a2555ae7357df.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#linux-raw-sys@0.9.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linux-raw-sys-0.9.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"linux_raw_sys","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linux-raw-sys-0.9.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["elf","errno","general","if_ether","ioctl","net","netlink","no_std","prctl","xdp"],"filenames":["/app/target/debug/deps/liblinux_raw_sys-461c7b128afce915.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerovec@0.11.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-0.11.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerovec","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-0.11.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive","yoke"],"filenames":["/app/target/debug/deps/libzerovec-f5b7fb2fe2221ca3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@1.0.8","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustix","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","event","fs","net","pipe","process","shm","std","time"],"filenames":["/app/target/debug/deps/librustix-54c5a83c1658c496.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.31","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-io-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_io","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-io-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libfutures_io-67b82bea7b1e0bc8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libmemchr-3b4e17255c9a44e9.rlib","/app/target/debug/deps/libmemchr-3b4e17255c9a44e9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinystr@0.8.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinystr-0.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinystr","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinystr-0.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","zerovec"],"filenames":["/app/target/debug/deps/libtinystr-eef40803de8d3d55.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-1.0.69/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-1.0.69/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/thiserror-0ab41f997ece6c55/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","serde_derive","std"],"filenames":["/app/target/debug/build/serde-c89fbae7b14c091d/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.26/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.26/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/app/target/debug/build/zerocopy-ce37cc0dffdc199b/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/serde-ab46b166710cf579/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","linked_libs":[],"linked_paths":[],"cfgs":["zerocopy_aarch64_simd_1_59_0","zerocopy_core_error_1_81_0","zerocopy_diagnostic_on_unimplemented_1_78_0","zerocopy_generic_bounds_in_const_fn_1_61_0","zerocopy_panic_in_const_and_vec_try_reserve_1_57_0","zerocopy_target_has_atomics_1_60_0"],"env":[],"out_dir":"/app/target/debug/build/zerocopy-a171ac0550851143/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/thiserror-5c7e835cbcf3ecb5/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@1.0.69","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"thiserror_impl","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libthiserror_impl-9444abc93e365afb.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrayvec@0.7.6","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrayvec-0.7.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrayvec","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrayvec-0.7.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libarrayvec-c26686cf41121f29.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","serde_derive","std"],"filenames":["/app/target/debug/deps/libserde-ec54548836705058.rlib","/app/target/debug/deps/libserde-ec54548836705058.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.26/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.26/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/app/target/debug/deps/libzerocopy-ae6198574733b8e5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-1.0.69/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-1.0.69/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libthiserror-f8083d0e5487937a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pkg-config@0.3.32","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pkg-config-0.3.32/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pkg_config","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pkg-config-0.3.32/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libpkg_config-318096eedab39bc1.rlib","/app/target/debug/deps/libpkg_config-318096eedab39bc1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libhashbrown-8496784f42df8aba.rlib","/app/target/debug/deps/libhashbrown-8496784f42df8aba.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winnow@0.7.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.7.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winnow","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.7.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libwinnow-d9fd3bd1bb11ad5b.rlib","/app/target/debug/deps/libwinnow-d9fd3bd1bb11ad5b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libequivalent-9ff5cbb44f5b198f.rlib","/app/target/debug/deps/libequivalent-9ff5cbb44f5b198f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@2.10.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.10.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libindexmap-1e0e3cbef6625023.rlib","/app/target/debug/deps/libindexmap-1e0e3cbef6625023.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","getrandom","std"],"filenames":["/app/target/debug/deps/librand_core-b58ef6350fb5674b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytemuck_derive@1.10.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytemuck_derive-1.10.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"bytemuck_derive","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytemuck_derive-1.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libbytemuck_derive-4366f2f2c2ea754d.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_datetime@0.6.11","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_datetime-0.6.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_datetime","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_datetime-0.6.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libtoml_datetime-8e6ad7c03a08cf79.rlib","/app/target/debug/deps/libtoml_datetime-8e6ad7c03a08cf79.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytemuck@1.23.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytemuck-1.23.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytemuck","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytemuck-1.23.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aarch64_simd","bytemuck_derive","derive","extern_crate_alloc"],"filenames":["/app/target/debug/deps/libbytemuck-9b7ffc96d4a3ed4a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_edit@0.22.27","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.22.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_edit","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml_edit-0.22.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["parse"],"filenames":["/app/target/debug/deps/libtoml_edit-d6417e741063f03f.rlib","/app/target/debug/deps/libtoml_edit-d6417e741063f03f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#enumflags2_derive@0.7.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumflags2_derive-0.7.12/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"enumflags2_derive","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumflags2_derive-0.7.12/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libenumflags2_derive-4a3476aa68be8922.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#signal-hook-registry@1.4.6","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/signal-hook-registry-1.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"signal_hook_registry","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/signal-hook-registry-1.4.6/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libsignal_hook_registry-fa691056a8bb57c9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libloading@0.8.8","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libloading","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libloading-0.8.8/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/liblibloading-354c3dba70bb267e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libunicode_ident-6d7f6cfdaa2f2a55.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg_aliases@0.2.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg_aliases-0.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_aliases","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg_aliases-0.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libcfg_aliases-e76e9c68341e21b2.rlib","/app/target/debug/deps/libcfg_aliases-e76e9c68341e21b2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/typenum-911c3e43dcb6b56a/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#static_assertions@1.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/static_assertions-1.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"static_assertions","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/static_assertions-1.1.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libstatic_assertions-a3df08552e85144e.rlib","/app/target/debug/deps/libstatic_assertions-a3df08552e85144e.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/typenum-93ec83b436bf1eae/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-crate@3.3.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-crate-3.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro_crate","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-crate-3.3.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libproc_macro_crate-56bf5ae052cb63d7.rlib","/app/target/debug/deps/libproc_macro_crate-56bf5ae052cb63d7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["/app/target/debug/build/generic-array-27e0812fe9f1c82e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zvariant_utils@3.2.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zvariant_utils-3.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zvariant_utils","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zvariant_utils-3.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libzvariant_utils-7466bb925e0741a4.rlib","/app/target/debug/deps/libzvariant_utils-7466bb925e0741a4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#simd-adler32@0.3.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simd-adler32-0.3.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"simd_adler32","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simd-adler32-0.3.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["const-generics","default","std"],"filenames":["/app/target/debug/deps/libsimd_adler32-ce98ab6204197f68.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking@2.2.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking-2.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking-2.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libparking-8758e440822b4b22.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","linked_libs":[],"linked_paths":[],"cfgs":["relaxed_coherence"],"env":[],"out_dir":"/app/target/debug/build/generic-array-036ebdaa4415d02c/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zvariant_derive@5.6.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zvariant_derive-5.6.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zvariant_derive","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zvariant_derive-5.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libzvariant_derive-73aa9c94b149bdbe.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"typenum","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libtypenum-95c161620aaca3ae.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polling@3.10.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polling-3.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polling","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polling-3.10.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libpolling-3f5f2711ce08ed58.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#concurrent-queue@2.5.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/concurrent-queue-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"concurrent_queue","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/concurrent-queue-2.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libconcurrent_queue-c93f7c2aa422eb62.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["/app/target/debug/build/lock_api-91537e545019d5b9/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.11/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.11/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/parking_lot_core-999b582fa35630d3/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/app/target/debug/build/getrandom-a4d3ce68c58380ff/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libm-0.2.15/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libm-0.2.15/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arch","default"],"filenames":["/app/target/debug/build/libm-bea1df92f0410dc7/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/getrandom-cc7c2012ba3f6a4c/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","linked_libs":[],"linked_paths":[],"cfgs":["arch_enabled"],"env":[["CFG_CARGO_FEATURES","[\"arch\", \"default\"]"],["CFG_OPT_LEVEL","0"],["CFG_TARGET_FEATURES","[\"fxsr\", \"sse\", \"sse2\"]"]],"out_dir":"/app/target/debug/build/libm-5566613c570f3f25/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/parking_lot_core-d5ba795b49a036a8/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","linked_libs":[],"linked_paths":[],"cfgs":["has_const_fn_trait_bound"],"env":[],"out_dir":"/app/target/debug/build/lock_api-96adb08174198570/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"generic_array","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["/app/target/debug/deps/libgeneric_array-0e8a2772e7ae3a96.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dlib@0.5.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dlib-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dlib","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dlib-0.5.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libdlib-8111e194c56768df.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-sys@0.31.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-sys-0.31.7/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-sys-0.31.7/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","dlopen","egl","once_cell"],"filenames":["/app/target/debug/build/wayland-sys-2983c84601df9f14/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#adler2@2.0.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/adler2-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"adler2","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/adler2-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libadler2-05d1217c9be2ffb5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#litemap@0.8.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/litemap-0.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"litemap","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/litemap-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/app/target/debug/deps/liblitemap-18a5c0d79183effd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scopeguard@1.2.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/scopeguard-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"scopeguard","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/scopeguard-1.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libscopeguard-25b1508fc49a71ee.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.5.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/build/crc32fast-5466925a00199899/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#writeable@0.6.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/writeable-0.6.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"writeable","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/writeable-0.6.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libwriteable-e8805dc05e359f4d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_locale_core@2.0.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_locale_core-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_locale_core","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_locale_core-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zerovec"],"filenames":["/app/target/debug/deps/libicu_locale_core-3996ca27f5f61988.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.5.0","linked_libs":[],"linked_paths":[],"cfgs":["stable_arm_crc32_intrinsics"],"env":[],"out_dir":"/app/target/debug/build/crc32fast-3a22bbf460790681/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lock_api","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["/app/target/debug/deps/liblock_api-0375b16e9183e098.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-sys@0.31.7","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/wayland-sys-c145fd34b1ec1794/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.8.9","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/miniz_oxide-0.8.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"miniz_oxide","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/miniz_oxide-0.8.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","simd","simd-adler32","with-alloc"],"filenames":["/app/target/debug/deps/libminiz_oxide-34f0ce6f87a5096b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libm-0.2.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libm","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libm-0.2.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arch","default"],"filenames":["/app/target/debug/deps/liblibm-5abcf8f6a5334c6c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot_core","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libparking_lot_core-1e45f66db44b9dd2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/app/target/debug/deps/libgetrandom-2bf282ed72b50b41.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#event-listener@5.4.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/event-listener-5.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"event_listener","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/event-listener-5.4.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","parking","std"],"filenames":["/app/target/debug/deps/libevent_listener-a15585c43f377337.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#potential_utf@0.1.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/potential_utf-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"potential_utf","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/potential_utf-0.1.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zerovec"],"filenames":["/app/target/debug/deps/libpotential_utf-d2e55c0196df854e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerotrie@0.2.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerotrie-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerotrie","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerotrie-0.2.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["yoke","zerofrom"],"filenames":["/app/target/debug/deps/libzerotrie-30001d6931a1d6e7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/icu_normalizer_data-908ab14563240597/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/icu_properties_data-2d36f9144fa2df16/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/percent-encoding-2.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"percent_encoding","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/percent-encoding-2.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libpercent_encoding-28f54ea3166949e7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"subtle","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libsubtle-1ddd5006b9f17045.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_collections@2.0.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_collections-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_collections","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_collections-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libicu_collections-f2e4b26d5223e224.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/icu_properties_data-416641e4b695464a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#event-listener-strategy@0.5.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/event-listener-strategy-0.5.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"event_listener_strategy","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/event-listener-strategy-0.5.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libevent_listener_strategy-20f3f10c202493e2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_provider@2.0.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_provider-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_provider","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_provider-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["baked","zerotrie"],"filenames":["/app/target/debug/deps/libicu_provider-599983c0188e54e1.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/icu_normalizer_data-1108723fc1f3855c/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#core_maths@0.1.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/core_maths-0.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"core_maths","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/core_maths-0.1.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libcore_maths-27ffe2f320f92de8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot@0.12.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot-0.12.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot-0.12.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libparking_lot-94fe83f0c49218f2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-sys@0.31.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-sys-0.31.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wayland_sys","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-sys-0.31.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","dlopen","egl","once_cell"],"filenames":["/app/target/debug/deps/libwayland_sys-58037022761c36e0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.5.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crc32fast","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libcrc32fast-d6edb6a16f9972cf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.96","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.96/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.96/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/app/target/debug/deps/libproc_macro2-46079c5fa5c58647.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-backend@0.3.11","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-backend-0.3.11/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-backend-0.3.11/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client_system","dlopen"],"filenames":["/app/target/debug/build/wayland-backend-a726499909777111/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fastrand@2.3.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fastrand-2.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fastrand","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fastrand-2.3.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libfastrand-85d33d4943525743.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zeroize-1.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zeroize","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zeroize-1.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default"],"filenames":["/app/target/debug/deps/libzeroize-ae1bd9c9860f8508.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/app/target/debug/deps/libquote-4a549b3d105b86d6.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-backend@0.3.11","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/wayland-backend-c3347fc9128bf9eb/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ttf-parser@0.25.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ttf-parser-0.25.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ttf_parser","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ttf-parser-0.25.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["apple-layout","core_maths","glyph-names","gvar-alloc","no-std-float","opentype-layout","std","variable-fonts"],"filenames":["/app/target/debug/deps/libttf_parser-81c7acbc057ee5f3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flate2@1.1.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flate2-1.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"flate2","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flate2-1.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["any_impl","default","miniz_oxide","rust_backend"],"filenames":["/app/target/debug/deps/libflate2-9e9899f0bd0d6aeb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties_data","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libicu_properties_data-629e8c450fbfb726.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer_data","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libicu_normalizer_data-f68d778e2827f63c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.1.6","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crypto-common-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crypto_common","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crypto-common-0.1.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["getrandom","rand_core","std"],"filenames":["/app/target/debug/deps/libcrypto_common-cdec238599384244.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#enumflags2@0.7.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumflags2-0.7.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"enumflags2","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumflags2-0.7.12/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde"],"filenames":["/app/target/debug/deps/libenumflags2-2e951574a03fd808.rlib","/app/target/debug/deps/libenumflags2-2e951574a03fd808.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-attributes@0.1.30","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-attributes-0.1.30/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tracing_attributes","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-attributes-0.1.30/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libtracing_attributes-7bb2f66ad4d35d22.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.34","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-core-0.1.34/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_core","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-core-0.1.34/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["once_cell","std"],"filenames":["/app/target/debug/deps/libtracing_core-ee875bf11b21d8e3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scoped-tls@1.0.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/scoped-tls-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"scoped_tls","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/scoped-tls-1.0.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libscoped_tls-bfa7654a82b713b9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#endi@1.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/endi-1.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"endi","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/endi-1.1.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libendi-b794662e21bc533d.rlib","/app/target/debug/deps/libendi-b794662e21bc533d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#downcast-rs@1.2.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/downcast-rs-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"downcast_rs","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/downcast-rs-1.2.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libdowncast_rs-9d238031b6b2c4e9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-0.1.41/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-0.1.41/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["attributes","default","std","tracing-attributes"],"filenames":["/app/target/debug/deps/libtracing-4f1cfda12a54f67a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zvariant@5.6.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zvariant-5.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zvariant","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zvariant-5.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","enumflags2"],"filenames":["/app/target/debug/deps/libzvariant-85657c2259c2f806.rlib","/app/target/debug/deps/libzvariant-85657c2259c2f806.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer@2.0.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/app/target/debug/deps/libicu_normalizer-86756f651a1a7f52.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-backend@0.3.11","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-backend-0.3.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wayland_backend","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-backend-0.3.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client_system","dlopen"],"filenames":["/app/target/debug/deps/libwayland_backend-57d1475922525847.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties@2.0.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/app/target/debug/deps/libicu_properties-c017259fd85fa182.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.104/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.104/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","full","parsing","printing","proc-macro"],"filenames":["/app/target/debug/deps/libsyn-7b4ee503eba831e0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-lite@2.6.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-lite-2.6.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_lite","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-lite-2.6.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","fastrand","futures-io","parking","race","std"],"filenames":["/app/target/debug/deps/libfutures_lite-a51aa236a765296d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quick-xml@0.37.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quick-xml-0.37.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quick_xml","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quick-xml-0.37.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libquick_xml-19d6b4b6c77eb721.rlib","/app/target/debug/deps/libquick_xml-19d6b4b6c77eb721.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","std"],"filenames":["/app/target/debug/build/num-traits-33c1cce4d128c878/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/librand_core-1da569b7195cd415.rlib","/app/target/debug/deps/librand_core-1da569b7195cd415.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#siphasher@1.0.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/siphasher-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"siphasher","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/siphasher-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libsiphasher-c79b637dfcfe2c39.rlib","/app/target/debug/deps/libsiphasher-c79b637dfcfe2c39.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_sink","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/app/target/debug/deps/libfutures_sink-866efe83bb1267cf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winnow@0.7.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.7.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winnow","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winnow-0.7.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libwinnow-aa2eb91fd6391560.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicase@2.8.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicase-2.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicase","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicase-2.8.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libunicase-e172866876312bdf.rlib","/app/target/debug/deps/libunicase-e172866876312bdf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#static_assertions@1.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/static_assertions-1.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"static_assertions","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/static_assertions-1.1.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libstatic_assertions-60a622c3a1fe4433.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-client@0.31.11","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-client-0.31.11/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-client-0.31.11/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/wayland-client-5bed5dde9ce4fe1d/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zvariant_utils@3.2.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zvariant_utils-3.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zvariant_utils","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zvariant_utils-3.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libzvariant_utils-c845c725f2b130b2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf_shared@0.11.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_shared-0.11.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"phf_shared","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_shared-0.11.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std","unicase"],"filenames":["/app/target/debug/deps/libphf_shared-50ad33db07df322c.rlib","/app/target/debug/deps/libphf_shared-50ad33db07df322c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-channel-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_channel","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-channel-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","futures-sink","sink","std"],"filenames":["/app/target/debug/deps/libfutures_channel-49454772f7c836c2.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-client@0.31.11","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/wayland-client-2ae9cb5af2d1d387/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-scanner@0.31.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-scanner-0.31.7/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"wayland_scanner","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-scanner-0.31.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libwayland_scanner-df9d9c643b735fe4.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["small_rng"],"filenames":["/app/target/debug/deps/librand-28f97b8858aa68b8.rlib","/app/target/debug/deps/librand-28f97b8858aa68b8.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","linked_libs":[],"linked_paths":[],"cfgs":["has_total_cmp"],"env":[],"out_dir":"/app/target/debug/build/num-traits-bf2a428857fb85f6/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna_adapter@1.2.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna_adapter-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna_adapter","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna_adapter-1.2.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/app/target/debug/deps/libidna_adapter-4c84f60150b3931b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zbus_names@4.2.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus_names-4.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zbus_names","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus_names-4.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libzbus_names-bf276a8da42565c0.rlib","/app/target/debug/deps/libzbus_names-bf276a8da42565c0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#enumflags2@0.7.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumflags2-0.7.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"enumflags2","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumflags2-0.7.12/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde"],"filenames":["/app/target/debug/deps/libenumflags2-d1baa03f90bdcb49.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.17.14/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.17.14/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback"],"filenames":["/app/target/debug/build/ring-cf2a67645fccf227/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.31","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-macro-0.3.31/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"futures_macro","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-macro-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libfutures_macro-b8aca8083ba0b40a.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memoffset@0.9.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/build/memoffset-d9645b3521a71f66/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-task-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_task","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-task-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/app/target/debug/deps/libfutures_task-a3603f61c0b3f23a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-utils-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_utils","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-utils-0.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libpin_utils-41b432c87f555421.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#endi@1.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/endi-1.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"endi","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/endi-1.1.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libendi-6018b60c86271d31.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.15.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/either-1.15.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/either-1.15.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std","use_std"],"filenames":["/app/target/debug/deps/libeither-775b09cd1c680f55.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8_iter-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf8_iter","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8_iter-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libutf8_iter-7c80e090d74f7ee1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@0.38.44","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.44/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.44/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","event","fs","libc-extra-traits","net","pipe","process","shm","std","system","thread","use-libc-auxv"],"filenames":["/app/target/debug/build/rustix-6d02a7927b54a2a8/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@0.38.44","linked_libs":[],"linked_paths":[],"cfgs":["static_assertions","linux_raw","linux_like","linux_kernel"],"env":[],"out_dir":"/app/target/debug/build/rustix-ff620dc7dcbf4175/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna@1.0.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna-1.0.3/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","compiled_data","std"],"filenames":["/app/target/debug/deps/libidna-22c68d80a158cc99.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zvariant@5.6.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zvariant-5.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zvariant","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zvariant-5.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","enumflags2"],"filenames":["/app/target/debug/deps/libzvariant-7d6fa047786fe14c.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#memoffset@0.9.1","linked_libs":[],"linked_paths":[],"cfgs":["tuple_ty","allow_clippy","maybe_uninit","doctests","raw_ref_macros","stable_const","stable_offset_of"],"env":[],"out_dir":"/app/target/debug/build/memoffset-f4a6c90d4e3f18eb/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_util","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","async-await","async-await-macro","channel","default","futures-channel","futures-io","futures-macro","futures-sink","io","memchr","sink","slab","std"],"filenames":["/app/target/debug/deps/libfutures_util-de7bb4f9ba6c87a7.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","linked_libs":["static=ring_core_0_17_14_","static=ring_core_0_17_14__test"],"linked_paths":["native=/app/target/debug/build/ring-afe12a14275f9cba/out"],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/ring-afe12a14275f9cba/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf_generator@0.11.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_generator-0.11.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"phf_generator","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_generator-0.11.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libphf_generator-c76fd4f2039767e3.rlib","/app/target/debug/deps/libphf_generator-c76fd4f2039767e3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-client@0.31.11","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-client-0.31.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wayland_client","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-client-0.31.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libwayland_client-068ce951fc36f2cf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_traits","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","std"],"filenames":["/app/target/debug/deps/libnum_traits-387dd5a36316c232.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-pki-types@1.12.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-pki-types-1.12.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls_pki_types","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-pki-types-1.12.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/librustls_pki_types-503b1a9521c1b639.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-lock@3.4.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-lock-3.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_lock","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-lock-3.4.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libasync_lock-92aa703fc4bb8d24.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#form_urlencoded@1.2.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/form_urlencoded-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"form_urlencoded","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/form_urlencoded-1.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/app/target/debug/deps/libform_urlencoded-e4c073c0b429176c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ppv-lite86-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ppv-lite86-0.2.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["/app/target/debug/deps/libppv_lite86-0ba84a8c16a66d1f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#linux-raw-sys@0.4.15","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linux-raw-sys-0.4.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"linux_raw_sys","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linux-raw-sys-0.4.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["elf","errno","general","if_ether","ioctl","net","netlink","no_std","prctl","system","xdp"],"filenames":["/app/target/debug/deps/liblinux_raw_sys-789ead2d9c1e45d3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-task@4.7.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-task-4.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_task","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-task-4.7.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libasync_task-d4d43f8a0d09bc07.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#url@2.5.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/url-2.5.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"url","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/url-2.5.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/app/target/debug/deps/liburl-d6eea557f8648221.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@0.38.44","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.44/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustix","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-0.38.44/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","event","fs","libc-extra-traits","net","pipe","process","shm","std","system","thread","use-libc-auxv"],"filenames":["/app/target/debug/deps/librustix-174abf38e8d393b5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-io@2.5.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-io-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_io","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-io-2.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libasync_io-1c05a8872cd825f2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf_macros@0.11.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_macros-0.11.3/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"phf_macros","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf_macros-0.11.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["unicase","unicase_"],"filenames":["/app/target/debug/deps/libphf_macros-28fea1e1db1aa07b.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memoffset@0.9.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memoffset","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memoffset-0.9.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libmemoffset-d32ab160bd8e6022.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zbus_names@4.2.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus_names-4.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zbus_names","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus_names-4.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libzbus_names-2139792305027a0e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-channel@2.5.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-channel-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_channel","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-channel-2.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libasync_channel-dde5381edfc5d857.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fdeflate@0.3.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fdeflate-0.3.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fdeflate","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fdeflate-0.3.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libfdeflate-1a67f8c9bc6be976.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nix@0.30.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.30.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.30.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["feature","memoffset","socket","uio","user"],"filenames":["/app/target/debug/build/nix-01cb4c5dbecdd93d/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quick-xml@0.36.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quick-xml-0.36.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quick_xml","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quick-xml-0.36.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","overlapped-lists","serde","serialize"],"filenames":["/app/target/debug/deps/libquick_xml-b4dac170bca1866f.rlib","/app/target/debug/deps/libquick_xml-b4dac170bca1866f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-epoch@0.9.18","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_epoch","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/app/target/debug/deps/libcrossbeam_epoch-56f02b583a0b8539.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memmap2@0.9.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memmap2-0.9.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memmap2","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memmap2-0.9.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libmemmap2-8d09eccb2b9c4fc0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#atomic-waker@1.1.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atomic-waker-1.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"atomic_waker","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atomic-waker-1.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libatomic_waker-90327227f2d9c6b4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-1.0.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoa","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-1.0.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libitoa-08c0ac77a7f9c5e1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#khronos_api@3.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/khronos_api-3.1.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/khronos_api-3.1.0/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/khronos_api-8f3596a6fd0b656e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytes@1.10.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytes-1.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytes","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytes-1.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libbytes-8b7319ab20ce4b75.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-core-1.12.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-core-1.12.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/rayon-core-0d96fe85b924d093/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@1.3.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-1.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-1.3.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libbitflags-8a4d4b1731737631.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#float-cmp@0.9.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/float-cmp-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"float_cmp","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/float-cmp-0.9.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/app/target/debug/deps/libfloat_cmp-3bd972db3233f4db.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#untrusted@0.9.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/untrusted-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"untrusted","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/untrusted-0.9.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libuntrusted-97e06493d2099462.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#khronos_api@3.1.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/khronos_api-8997f954036f22de/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#png@0.17.16","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/png-0.17.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"png","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/png-0.17.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libpng-279240e2369a899b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#strict-num@0.1.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/strict-num-0.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strict_num","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/strict-num-0.1.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["approx-eq","default","float-cmp"],"filenames":["/app/target/debug/deps/libstrict_num-a9d527ffa74aaea8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.17.14/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ring","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.17.14/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback"],"filenames":["/app/target/debug/deps/libring-f37c5058b5ca4a47.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/rayon-core-63e32c33ac28b7b8/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zbus_xml@5.0.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus_xml-5.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zbus_xml","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus_xml-5.0.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libzbus_xml-d9088fad4970da1b.rlib","/app/target/debug/deps/libzbus_xml-d9088fad4970da1b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#piper@0.2.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/piper-0.2.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"piper","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/piper-0.2.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","futures-io","std"],"filenames":["/app/target/debug/deps/libpiper-b9c622a3ce03e3b4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-deque@0.8.6","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-deque-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_deque","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-deque-0.8.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libcrossbeam_deque-db865e64ae5e2f3c.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#nix@0.30.1","linked_libs":[],"linked_paths":[],"cfgs":["linux","linux_android"],"env":[],"out_dir":"/app/target/debug/build/nix-f105631d445f1c59/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-signal@0.2.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-signal-0.2.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_signal","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-signal-0.2.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libasync_signal-2c8abfc2a301ae38.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf@0.11.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf-0.11.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"phf","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/phf-0.11.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","macros","phf_macros","std","unicase"],"filenames":["/app/target/debug/deps/libphf-dcb82a89d69bb1f2.rlib","/app/target/debug/deps/libphf-dcb82a89d69bb1f2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#owned_ttf_parser@0.25.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/owned_ttf_parser-0.25.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"owned_ttf_parser","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/owned_ttf_parser-0.25.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["apple-layout","default","glyph-names","gvar-alloc","opentype-layout","std","variable-fonts"],"filenames":["/app/target/debug/deps/libowned_ttf_parser-930b28ee9a19861e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quick-xml@0.36.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quick-xml-0.36.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quick_xml","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quick-xml-0.36.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","overlapped-lists","serde","serialize"],"filenames":["/app/target/debug/deps/libquick_xml-6a906268306e7d9d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ahash-0.8.12/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ahash-0.8.12/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","getrandom","no-rng","runtime-rng","serde","std"],"filenames":["/app/target/debug/build/ahash-181155ee29461eb0/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#profiling-procmacros@1.0.17","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/profiling-procmacros-1.0.17/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"profiling_procmacros","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/profiling-procmacros-1.0.17/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libprofiling_procmacros-13c8a0be8c55adf3.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equator-macro@0.4.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equator-macro-0.4.2/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"equator_macro","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equator-macro-0.4.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libequator_macro-0f752546fa2d0a32.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrayref@0.3.9","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrayref-0.3.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrayref","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrayref-0.3.9/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libarrayref-966e279689bb295c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ab_glyph_rasterizer@0.1.9","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ab_glyph_rasterizer-0.1.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ab_glyph_rasterizer","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ab_glyph_rasterizer-0.1.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libab_glyph_rasterizer-1802dac93a1cb930.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.31","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-0.23.31/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-0.23.31/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["log","logging","ring","std","tls12"],"filenames":["/app/target/debug/build/rustls-26bd6364ff5ed620/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equator@0.4.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equator-0.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equator","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equator-0.4.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libequator-f6d39d3319d2f87d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#profiling@1.0.17","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/profiling-1.0.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"profiling","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/profiling-1.0.17/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","procmacros","profiling-procmacros"],"filenames":["/app/target/debug/deps/libprofiling-cbc740e0747ac98a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ab_glyph@0.2.31","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ab_glyph-0.2.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ab_glyph","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ab_glyph-0.2.31/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","gvar-alloc","std","variable-fonts"],"filenames":["/app/target/debug/deps/libab_glyph-9d8c4cd3434f4889.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.31","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/rustls-4dbf2e23eb5f2cd0/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12","linked_libs":[],"linked_paths":[],"cfgs":["folded_multiply"],"env":[],"out_dir":"/app/target/debug/build/ahash-3b702e97b87d4af3/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tiny-skia-path@0.11.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tiny-skia-path-0.11.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tiny_skia_path","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tiny-skia-path-0.11.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libtiny_skia_path-c51575f6fb6f73a3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zbus_xml@5.0.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus_xml-5.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zbus_xml","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus_xml-5.0.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libzbus_xml-2dcda536b32a9099.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-process@2.4.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-process-2.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_process","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-process-2.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libasync_process-9ed3f4d622e6793c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zbus-lockstep@0.5.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus-lockstep-0.5.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zbus_lockstep","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus-lockstep-0.5.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libzbus_lockstep-bd01fb7f4648220d.rlib","/app/target/debug/deps/libzbus_lockstep-bd01fb7f4648220d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-core-1.12.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon_core","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-core-1.12.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/librayon_core-d553ee6d6c2c4e0e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#blocking@1.6.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/blocking-1.6.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"blocking","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/blocking-1.6.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libblocking-494c8c094710ab2f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nix@0.30.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.30.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nix","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nix-0.30.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["feature","memoffset","socket","uio","user"],"filenames":["/app/target/debug/deps/libnix-6213150618772f71.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-webpki@0.103.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-webpki-0.103.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-webpki-0.103.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","ring","std"],"filenames":["/app/target/debug/deps/libwebpki-4b9dcd389ca54d26.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#khronos_api@3.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/khronos_api-3.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"khronos_api","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/khronos_api-3.1.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libkhronos_api-e508a54c87d874b5.rlib","/app/target/debug/deps/libkhronos_api-e508a54c87d874b5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-executor@1.13.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-executor-1.13.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_executor","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-executor-1.13.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libasync_executor-32412b79b64d798f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.46","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-integer-0.1.46/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_integer","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-integer-0.1.46/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["i128","std"],"filenames":["/app/target/debug/deps/libnum_integer-7c06dcd146d2bc90.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-protocols@0.32.9","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-protocols-0.32.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wayland_protocols","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-protocols-0.32.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","staging","unstable","wayland-client"],"filenames":["/app/target/debug/deps/libwayland_protocols-5e7d86d2e5b8c613.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zbus_macros@5.9.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus_macros-5.9.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zbus_macros","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus_macros-5.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libzbus_macros-11be409c4da660f8.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-broadcast@0.7.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-broadcast-0.7.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_broadcast","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-broadcast-0.7.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libasync_broadcast-7bc4b0b50c5a911d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.10.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/block-buffer-0.10.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"block_buffer","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/block-buffer-0.10.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libblock_buffer-237124e17683fddb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ordered-stream@0.2.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ordered-stream-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ordered_stream","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ordered-stream-0.2.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libordered_stream-7d98a6bc8ae5cba7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_repr@0.1.20","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_repr-0.1.20/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_repr","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_repr-0.1.20/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libserde_repr-38eb60277cd3a448.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#enumn@0.1.14","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumn-0.1.14/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"enumn","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumn-0.1.14/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libenumn-5e1885bd9145fb32.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-macros@2.5.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-macros-2.5.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tokio_macros","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-macros-2.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libtokio_macros-a2ac1c025805c620.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-trait@0.1.88","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-trait-0.1.88/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_trait","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-trait-0.1.88/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libasync_trait-1f475d1f71c813b2.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#socket2@0.6.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/socket2-0.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"socket2","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/socket2-0.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["all"],"filenames":["/app/target/debug/deps/libsocket2-1e6e67d56e11bc91.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mio@1.0.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mio-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mio","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mio-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["net","os-ext","os-poll"],"filenames":["/app/target/debug/deps/libmio-81cf496a7da58b73.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#semver@1.0.26","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-1.0.26/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-1.0.26/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/build/semver-b6aac3c7cceb0190/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#log@0.4.27","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"log","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/liblog-9457cdfbb6cf2e49.rlib","/app/target/debug/deps/liblog-9457cdfbb6cf2e49.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#xml-rs@0.8.27","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/xml-rs-0.8.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"xml","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/xml-rs-0.8.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libxml-e49c7e98c472b562.rlib","/app/target/debug/deps/libxml-e49c7e98c472b562.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.22.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.22.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.22.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libbase64-81e6578c186514d8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.98","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anyhow-1.0.98/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anyhow-1.0.98/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/build/anyhow-b3031e426d49d7c9/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hex@0.4.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.4.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hex","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.4.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libhex-39f5f8bc1bd9aca4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cpufeatures-0.2.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cpufeatures","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cpufeatures-0.2.17/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libcpufeatures-0f8ee1944988dae8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zbus@5.9.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus-5.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zbus","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus-5.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async-executor","async-fs","async-io","async-lock","async-process","async-task","blocking"],"filenames":["/app/target/debug/deps/libzbus-c78225295225e6b8.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.98","linked_libs":[],"linked_paths":[],"cfgs":["std_backtrace"],"env":[],"out_dir":"/app/target/debug/build/anyhow-1fea51c98c81cce8/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gl_generator@0.14.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gl_generator-0.14.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gl_generator","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gl_generator-0.14.0/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libgl_generator-a38ccfd14d21b03d.rlib","/app/target/debug/deps/libgl_generator-a38ccfd14d21b03d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#semver@1.0.26","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/semver-f8d0bc77d8a9dbf1/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio@1.47.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytes","default","fs","full","io-std","io-util","libc","macros","mio","net","parking_lot","process","rt","rt-multi-thread","signal","signal-hook-registry","socket2","sync","time","tokio-macros"],"filenames":["/app/target/debug/deps/libtokio-dabd4d519d8b6ebc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#accesskit@0.19.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/accesskit-0.19.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"accesskit","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/accesskit-0.19.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["enumn","serde"],"filenames":["/app/target/debug/deps/libaccesskit-8f1606a1796d5696.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#digest@0.10.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/digest-0.10.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"digest","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/digest-0.10.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","block-buffer","core-api","default","mac","std","subtle"],"filenames":["/app/target/debug/deps/libdigest-055416691508ad86.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.4.6","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-0.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_bigint","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-0.4.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/app/target/debug/deps/libnum_bigint-d1b2c999fb173cff.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.31","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-0.23.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-0.23.31/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["log","logging","ring","std","tls12"],"filenames":["/app/target/debug/deps/librustls-e9710c718f923eec.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zbus-lockstep-macros@0.5.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus-lockstep-macros-0.5.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zbus_lockstep_macros","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus-lockstep-macros-0.5.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libzbus_lockstep_macros-c3732efeb465593a.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zbus-lockstep@0.5.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus-lockstep-0.5.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zbus_lockstep","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zbus-lockstep-0.5.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libzbus_lockstep-7d70b1d7f395a9ef.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ahash-0.8.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ahash","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ahash-0.8.12/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","getrandom","no-rng","runtime-rng","serde","std"],"filenames":["/app/target/debug/deps/libahash-87d8d4ee471f8b55.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aligned-vec@0.6.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aligned-vec-0.6.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aligned_vec","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aligned-vec-0.6.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libaligned_vec-4c7e2ca9363474f5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#calloop@0.13.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/calloop-0.13.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"calloop","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/calloop-0.13.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libcalloop-094f9d3ea4255cab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#x11-dl@2.21.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x11-dl-2.21.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x11-dl-2.21.0/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/x11-dl-2ef534180b3c5e31/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#xcursor@0.3.10","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/xcursor-0.3.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"xcursor","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/xcursor-0.3.10/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libxcursor-997eea68c1f95315.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#built@0.7.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/built-0.7.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"built","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/built-0.7.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libbuilt-ad45ef409d21005b.rlib","/app/target/debug/deps/libbuilt-ad45ef409d21005b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smithay-client-toolkit@0.19.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smithay-client-toolkit-0.19.2/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smithay-client-toolkit-0.19.2/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["calloop","calloop-wayland-source"],"filenames":["/app/target/debug/build/smithay-client-toolkit-98070c00c2b92fbb/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.142","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.142/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.142/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/build/serde_json-2e4f09dd2cb82cc1/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#minimal-lexical@0.2.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/minimal-lexical-0.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"minimal_lexical","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/minimal-lexical-0.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/app/target/debug/deps/libminimal_lexical-7ab26ee8385d3391.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/paste-1.0.15/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/paste-1.0.15/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/paste-0b201480a7acb024/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#xkeysym@0.2.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/xkeysym-0.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"xkeysym","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/xkeysym-0.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libxkeysym-daad87b7ae459381.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cursor-icon@1.2.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cursor-icon-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cursor_icon","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cursor-icon-1.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libcursor_icon-5d1c7acd8d7101de.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#smithay-client-toolkit@0.19.2","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/smithay-client-toolkit-33230a945d6f82a6/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/paste-147e33d57b14a002/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-csd-frame@0.3.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-csd-frame-0.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wayland_csd_frame","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-csd-frame-0.3.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libwayland_csd_frame-8ca63196733e4775.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.142","linked_libs":[],"linked_paths":[],"cfgs":["fast_arithmetic=\"64\""],"env":[],"out_dir":"/app/target/debug/build/serde_json-a3e4b13d5b3f0601/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rav1e@0.7.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rav1e-0.7.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rav1e-0.7.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["threading"],"filenames":["/app/target/debug/build/rav1e-cbfd167d273bf6b7/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nom@7.1.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nom","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libnom-4e6e7f87c2907fc5.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#x11-dl@2.21.0","linked_libs":["dl"],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/x11-dl-1ae1c979ee0aa1e0/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#v_frame@0.3.9","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/v_frame-0.3.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"v_frame","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/v_frame-0.3.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libv_frame-f3d153bec19c9f90.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-cursor@0.31.11","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-cursor-0.31.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wayland_cursor","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-cursor-0.31.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libwayland_cursor-2ea1662df380a743.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#calloop-wayland-source@0.3.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/calloop-wayland-source-0.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"calloop_wayland_source","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/calloop-wayland-source-0.3.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libcalloop_wayland_source-ecc092275f371c3d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#atspi-common@0.9.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atspi-common-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"atspi_common","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atspi-common-0.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async-std","wrappers","zbus"],"filenames":["/app/target/debug/deps/libatspi_common-5b7b48628a32b3a0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-rational@0.4.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-rational-0.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_rational","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-rational-0.4.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","num-bigint","std"],"filenames":["/app/target/debug/deps/libnum_rational-1e2a180e6f78d14c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#semver@1.0.26","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-1.0.26/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"semver","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-1.0.26/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libsemver-f105bdaea43e2301.rlib","/app/target/debug/deps/libsemver-f105bdaea43e2301.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.98","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anyhow-1.0.98/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anyhow","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anyhow-1.0.98/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libanyhow-ab7828b45f7ca0be.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-protocols-wlr@0.3.9","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-protocols-wlr-0.3.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wayland_protocols_wlr","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-protocols-wlr-0.3.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","wayland-client"],"filenames":["/app/target/debug/deps/libwayland_protocols_wlr-2d86e0ca4e046f5b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon@1.10.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-1.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-1.10.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/librayon-38890b12709270a1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tiny-skia@0.11.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tiny-skia-0.11.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tiny_skia","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tiny-skia-0.11.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","png","png-format","simd","std"],"filenames":["/app/target/debug/deps/libtiny_skia-414d738f01d5190a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#webpki-roots@1.0.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webpki-roots-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki_roots","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webpki-roots-1.0.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libwebpki_roots-873157f696194414.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#secp256k1-sys@0.10.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/secp256k1-sys-0.10.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/secp256k1-sys-0.10.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/app/target/debug/build/secp256k1-sys-5cabab9fa9ca7875/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#weezl@0.1.10","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/weezl-0.1.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"weezl","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/weezl-0.1.10/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libweezl-bf4f31f4516d846b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ryu-1.0.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ryu","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ryu-1.0.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libryu-1d74fbb8396b52fe.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitcoin-io@0.1.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitcoin-io-0.1.3/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitcoin-io-0.1.3/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/app/target/debug/build/bitcoin-io-3a86578bbacc0e94/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quick-error@2.0.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quick-error-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quick_error","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quick-error-2.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libquick_error-7162b0a74b50fdda.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.142","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.142/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.142/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libserde_json-b49a4ab953b7e9c3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#webpki-roots@0.26.11","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webpki-roots-0.26.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki_roots","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webpki-roots-0.26.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libwebpki_roots-a7a83529dd129b58.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitcoin-io@0.1.3","linked_libs":[],"linked_paths":[],"cfgs":["rust_v_1_56","rust_v_1_57","rust_v_1_58","rust_v_1_59","rust_v_1_60","rust_v_1_61","rust_v_1_62","rust_v_1_63","rust_v_1_64","rust_v_1_65","rust_v_1_66","rust_v_1_67","rust_v_1_68","rust_v_1_69","rust_v_1_70","rust_v_1_71","rust_v_1_72","rust_v_1_73","rust_v_1_74","rust_v_1_75","rust_v_1_76","rust_v_1_77","rust_v_1_78","rust_v_1_79","rust_v_1_80","rust_v_1_81","rust_v_1_82","rust_v_1_83","rust_v_1_84","rust_v_1_85","rust_v_1_86","rust_v_1_87","rust_v_1_88"],"env":[],"out_dir":"/app/target/debug/build/bitcoin-io-eb2b48c8ceaddad5/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#secp256k1-sys@0.10.1","linked_libs":["static=secp256k1"],"linked_paths":["native=/app/target/debug/build/secp256k1-sys-607caccb88576ab3/out"],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/secp256k1-sys-607caccb88576ab3/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smithay-client-toolkit@0.19.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smithay-client-toolkit-0.19.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smithay_client_toolkit","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smithay-client-toolkit-0.19.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["calloop","calloop-wayland-source"],"filenames":["/app/target/debug/deps/libsmithay_client_toolkit-733ad8040f824e2d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#av1-grain@0.2.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/av1-grain-0.2.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"av1_grain","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/av1-grain-0.2.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["create","default","diff","estimate","nom","num-rational","parse","v_frame"],"filenames":["/app/target/debug/deps/libav1_grain-de4d8dd795ac0161.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#maybe-rayon@0.1.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/maybe-rayon-0.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"maybe_rayon","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/maybe-rayon-0.1.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["rayon","threads"],"filenames":["/app/target/debug/deps/libmaybe_rayon-5a388e638addc8c4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustc_version@0.4.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc_version-0.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustc_version","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc_version-0.4.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/librustc_version-d23e013d1f9c7a62.rlib","/app/target/debug/deps/librustc_version-d23e013d1f9c7a62.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#x11-dl@2.21.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x11-dl-2.21.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"x11_dl","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x11-dl-2.21.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libx11_dl-c6c547c1439c2419.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/paste-1.0.15/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"paste","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/paste-1.0.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libpaste-e0ce49330c3120dc.so"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rav1e@0.7.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["PROFILE","debug"],["CARGO_CFG_TARGET_FEATURE","fxsr,sse,sse2"],["CARGO_ENCODED_RUSTFLAGS",""]],"out_dir":"/app/target/debug/build/rav1e-ccc1ab38c9fd1343/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.3.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/app/target/debug/deps/librand_chacha-cba25c1d632d769a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itertools@0.12.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itertools-0.12.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itertools","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itertools-0.12.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","use_alloc","use_std"],"filenames":["/app/target/debug/deps/libitertools-460a44c1c080289a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.9.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.9.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["os_rng","std"],"filenames":["/app/target/debug/deps/librand_core-d36685533b9ebe3c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#emath@0.32.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/emath-0.32.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"emath","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/emath-0.32.0/src/lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytemuck","serde"],"filenames":["/app/target/debug/deps/libemath-a8be52af3bc9b9ac.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rgb@0.8.52","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rgb-0.8.52/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rgb","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rgb-0.8.52/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["argb","as-bytes","bytemuck","default","grb"],"filenames":["/app/target/debug/deps/librgb-2be3de5ad9875f0d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-derive@0.4.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-derive-0.4.2/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"num_derive","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-derive-0.4.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libnum_derive-4a6d820dc4acf692.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arg_enum_proc_macro@0.3.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arg_enum_proc_macro-0.3.4/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"arg_enum_proc_macro","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arg_enum_proc_macro-0.3.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libarg_enum_proc_macro-8fce533b82f8083c.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#simd_helpers@0.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simd_helpers-0.1.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"simd_helpers","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simd_helpers-0.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libsimd_helpers-90b53b16d98a77e2.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.12/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.12/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/build/thiserror-1fe595b50b76ce20/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#noop_proc_macro@0.3.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/noop_proc_macro-0.3.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"noop_proc_macro","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/noop_proc_macro-0.3.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libnoop_proc_macro-53fb71e00d4cab50.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zune-core@0.4.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zune-core-0.4.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zune_core","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zune-core-0.4.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/app/target/debug/deps/libzune_core-5f6cf0ad2ceaf9aa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#color_quant@1.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/color_quant-1.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"color_quant","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/color_quant-1.1.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libcolor_quant-d7d616fb5bb7a458.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#new_debug_unreachable@1.0.6","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/new_debug_unreachable-1.0.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"debug_unreachable","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/new_debug_unreachable-1.0.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libdebug_unreachable-5c3350bd7cc9be26.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#as-raw-xcb-connection@1.0.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/as-raw-xcb-connection-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"as_raw_xcb_connection","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/as-raw-xcb-connection-1.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default"],"filenames":["/app/target/debug/deps/libas_raw_xcb_connection-f5a8f885d680d3a0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/build/httparse-af37b3e2ea59937d/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#foldhash@0.1.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foldhash-0.1.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"foldhash","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foldhash-0.1.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libfoldhash-14471c7ace9f4d12.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#x11rb-protocol@0.13.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x11rb-protocol-0.13.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"x11rb_protocol","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x11rb-protocol-0.13.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["randr","render","resource_manager","shape","std","xfixes","xinput","xkb"],"filenames":["/app/target/debug/deps/libx11rb_protocol-b12c18c623c449a8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#imgref@1.11.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/imgref-1.11.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"imgref","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/imgref-1.11.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","deprecated"],"filenames":["/app/target/debug/deps/libimgref-9a17fba825988987.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#byteorder-lite@0.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/byteorder-lite-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"byteorder_lite","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/byteorder-lite-0.1.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libbyteorder_lite-c85076c3565f09a8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitstream-io@2.6.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitstream-io-2.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitstream_io","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitstream-io-2.6.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libbitstream_io-ff9e404b089c4b6e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#x11rb@0.13.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x11rb-0.13.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"x11rb","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x11rb-0.13.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["allow-unsafe-code","as-raw-xcb-connection","dl-libxcb","libc","libloading","once_cell","randr","render","resource_manager","shape","xfixes","xinput","xkb"],"filenames":["/app/target/debug/deps/libx11rb-99f7399742e76d27.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#image-webp@0.2.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/image-webp-0.2.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"image_webp","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/image-webp-0.2.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libimage_webp-f2566e91452dea88.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default-hasher"],"filenames":["/app/target/debug/deps/libhashbrown-daf31e6cf4f8192a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rav1e@0.7.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rav1e-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rav1e","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rav1e-0.7.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["threading"],"filenames":["/app/target/debug/deps/librav1e-3c7323bddf33465f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#loop9@0.1.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/loop9-0.1.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"loop9","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/loop9-0.1.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libloop9-14853dd1b8419d3c.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","linked_libs":[],"linked_paths":[],"cfgs":["httparse_simd_neon_intrinsics","httparse_simd"],"env":[],"out_dir":"/app/target/debug/build/httparse-cd2acd3122f2951e/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gif@0.13.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gif-0.13.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gif","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gif-0.13.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["color_quant","default","raii_no_panic","std"],"filenames":["/app/target/debug/deps/libgif-4085cc4430fa3334.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zune-jpeg@0.4.20","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zune-jpeg-0.4.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zune_jpeg","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zune-jpeg-0.4.20/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","neon","std","x86"],"filenames":["/app/target/debug/deps/libzune_jpeg-de6095dc24998c62.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/thiserror-b8cd02a6a03190c6/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ecolor@0.32.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ecolor-0.32.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ecolor","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ecolor-0.32.0/src/lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytemuck","serde"],"filenames":["/app/target/debug/deps/libecolor-fddd398a2f691813.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","getrandom","libc","rand_chacha","std","std_rng"],"filenames":["/app/target/debug/deps/librand-b8ca3e314d6bbde3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.9.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/app/target/debug/deps/librand_chacha-0fb0fe9d279594b0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flatbuffers@25.2.10","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flatbuffers-25.2.10/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flatbuffers-25.2.10/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/build/flatbuffers-8ff5c60e176f1248/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitcoin-io@0.1.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitcoin-io-0.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitcoin_io","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitcoin-io-0.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/app/target/debug/deps/libbitcoin_io-fd5a51cbdb4bf04b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#secp256k1-sys@0.10.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/secp256k1-sys-0.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"secp256k1_sys","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/secp256k1-sys-0.10.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/app/target/debug/deps/libsecp256k1_sys-552b5344e3ec434b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#atspi-proxies@0.9.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atspi-proxies-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"atspi_proxies","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atspi-proxies-0.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async-std"],"filenames":["/app/target/debug/deps/libatspi_proxies-fa1c55cdc0800bc3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#doxygen-rs@0.4.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/doxygen-rs-0.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"doxygen_rs","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/doxygen-rs-0.4.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libdoxygen_rs-f20f88490bf35a21.rlib","/app/target/debug/deps/libdoxygen_rs-f20f88490bf35a21.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zune-inflate@0.2.54","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zune-inflate-0.2.54/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zune_inflate","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zune-inflate-0.2.54/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd-adler32","zlib"],"filenames":["/app/target/debug/deps/libzune_inflate-1e49d56b56a4ccdc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winit@0.30.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winit-0.30.12/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winit-0.30.12/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ahash","bytemuck","default","memmap2","percent-encoding","rwh_06","sctk","sctk-adwaita","wayland","wayland-backend","wayland-client","wayland-csd-adwaita","wayland-dlopen","wayland-protocols","wayland-protocols-plasma","x11","x11-dl","x11rb"],"filenames":["/app/target/debug/build/winit-606d02686ccc4c27/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#avif-serialize@0.8.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/avif-serialize-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"avif_serialize","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/avif-serialize-0.8.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libavif_serialize-91abb38942a9f813.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hex-conservative@0.2.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-conservative-0.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hex_conservative","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-conservative-0.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/app/target/debug/deps/libhex_conservative-e8ba1b73302e19ea.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unic-langid-impl@0.9.6","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unic-langid-impl-0.9.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unic_langid_impl","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unic-langid-impl-0.9.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libunic_langid_impl-cf43f1139c39293c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slotmap@1.0.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slotmap-1.0.7/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slotmap-1.0.7/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/slotmap-50c94a884285e0e3/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@2.0.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-2.0.12/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"thiserror_impl","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-2.0.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libthiserror_impl-359b688933e33226.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#half@2.6.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/half-2.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"half","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/half-2.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libhalf-576cb0bcd50598eb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fnv-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fnv","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fnv-1.0.7/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libfnv-e0546c5af4cc890e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bit_field@0.10.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bit_field-0.10.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bit_field","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bit_field-0.10.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libbit_field-9287275e69e2d1b0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#raw-window-handle@0.6.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/raw-window-handle-0.6.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"raw_window_handle","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/raw-window-handle-0.6.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/app/target/debug/deps/libraw_window_handle-e949f9c5174d7448.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#epaint_default_fonts@0.32.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/epaint_default_fonts-0.32.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"epaint_default_fonts","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/epaint_default_fonts-0.32.0/src/lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libepaint_default_fonts-fa5a7b0da60733ba.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nohash-hasher@0.2.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nohash-hasher-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nohash_hasher","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nohash-hasher-0.2.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libnohash_hasher-e05ae2f6648c7f43.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#jpeg-decoder@0.3.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jpeg-decoder-0.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"jpeg_decoder","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jpeg-decoder-0.3.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libjpeg_decoder-744832d0bac84264.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lebe@0.5.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lebe-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lebe","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lebe-0.5.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/liblebe-d3c4d6a381fb5d3c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#epaint@0.32.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/epaint-0.32.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"epaint","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/epaint-0.32.0/src/lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytemuck","default","default_fonts","epaint_default_fonts","log","serde"],"filenames":["/app/target/debug/deps/libepaint-e3edb6ffaf0656cd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tiff@0.9.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tiff-0.9.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tiff","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tiff-0.9.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libtiff-16d6c7db47984ab0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libthiserror-dd9a96ed63eb3dd8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#exr@1.73.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/exr-1.73.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"exr","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/exr-1.73.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libexr-73a7cc47eaff1040.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http@1.3.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-1.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-1.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libhttp-9d04d74ae10be730.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unic-langid@0.9.6","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unic-langid-0.9.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unic_langid","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unic-langid-0.9.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libunic_langid-ae59d32bd77339db.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitcoin_hashes@0.14.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitcoin_hashes-0.14.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitcoin_hashes","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitcoin_hashes-0.14.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","bitcoin-io","serde","std"],"filenames":["/app/target/debug/deps/libbitcoin_hashes-29b3bb44ed950f31.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#slotmap@1.0.7","linked_libs":[],"linked_paths":[],"cfgs":["has_min_const_generics"],"env":[],"out_dir":"/app/target/debug/build/slotmap-fe426f73b2ab59ee/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ravif@0.11.20","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ravif-0.11.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ravif","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ravif-0.11.20/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["threading"],"filenames":["/app/target/debug/deps/libravif-b193802a3419c32a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lmdb-master-sys@0.2.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lmdb-master-sys-0.2.5/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lmdb-master-sys-0.2.5/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/build/lmdb-master-sys-3a16bcb3341d51c0/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#winit@0.30.12","linked_libs":[],"linked_paths":[],"cfgs":["free_unix","x11_platform","wayland_platform"],"env":[],"out_dir":"/app/target/debug/build/winit-ddc7d07d4040585e/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#atspi-connection@0.9.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atspi-connection-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"atspi_connection","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atspi-connection-0.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async-std"],"filenames":["/app/target/debug/deps/libatspi_connection-162723268c271f34.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#secp256k1@0.29.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/secp256k1-0.29.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"secp256k1","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/secp256k1-0.29.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","global-context","rand","rand-std","serde","std"],"filenames":["/app/target/debug/deps/libsecp256k1-a73a581bef49b19b.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#flatbuffers@25.2.10","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/flatbuffers-6cc7fd46410d686c/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.9.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.9.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.9.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","os_rng","small_rng","std","std_rng","thread_rng"],"filenames":["/app/target/debug/deps/librand-ee15859291549d03.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"httparse","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libhttparse-886ccfde8bef0a26.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#accesskit_consumer@0.28.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/accesskit_consumer-0.28.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"accesskit_consumer","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/accesskit_consumer-0.28.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libaccesskit_consumer-a460ff1a6eba9031.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sctk-adwaita@0.10.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sctk-adwaita-0.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sctk_adwaita","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sctk-adwaita-0.10.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ab_glyph","memmap2"],"filenames":["/app/target/debug/deps/libsctk_adwaita-482a36325f0fe928.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#xkbcommon-dl@0.4.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/xkbcommon-dl-0.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"xkbcommon_dl","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/xkbcommon-dl-0.4.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["x11"],"filenames":["/app/target/debug/deps/libxkbcommon_dl-1bb799cdff8b4fe8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha1@0.10.6","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sha1-0.10.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha1","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sha1-0.10.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libsha1-cda50fbd05f8a554.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin_egl_sys@0.7.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin_egl_sys-0.7.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin_egl_sys-0.7.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/glutin_egl_sys-f0cb234dccc637eb/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin_glx_sys@0.6.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin_glx_sys-0.6.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin_glx_sys-0.6.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/glutin_glx_sys-1c48a410c00da173/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ron@0.10.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ron-0.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ron","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ron-0.10.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","integer128"],"filenames":["/app/target/debug/deps/libron-2adf53e02cced716.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wayland-protocols-plasma@0.3.9","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-protocols-plasma-0.3.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wayland_protocols_plasma","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wayland-protocols-plasma-0.3.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","wayland-client"],"filenames":["/app/target/debug/deps/libwayland_protocols_plasma-50018f1afa2f5630.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#qoi@0.4.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/qoi-0.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"qoi","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/qoi-0.4.1/src/lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libqoi-17fc0d5dc8492506.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smol_str@0.2.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smol_str-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smol_str","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smol_str-0.2.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libsmol_str-4a2fccb0819bded1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-segmentation@1.12.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-segmentation-1.12.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_segmentation","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-segmentation-1.12.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libunicode_segmentation-0eac51444142527b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dpi@0.1.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dpi-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dpi","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dpi-0.1.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libdpi-869456d1deb59385.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinyvec_macros@0.1.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec_macros-0.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinyvec_macros","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec_macros-0.1.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libtinyvec_macros-251c1a928f9f42db.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#roxmltree@0.20.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/roxmltree-0.20.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"roxmltree","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/roxmltree-0.20.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","positions","std"],"filenames":["/app/target/debug/deps/libroxmltree-bbf767f4af68d843.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#data-encoding@2.9.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/data-encoding-2.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"data_encoding","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/data-encoding-2.9.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libdata_encoding-45ab2f9a7a6a6d74.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bech32@0.11.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bech32-0.11.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bech32","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bech32-0.11.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/app/target/debug/deps/libbech32-7af4280db90527b9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf-8@0.7.6","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf-8-0.7.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf8","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf-8-0.7.6/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libutf8-8ea22e4a3188d679.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winit@0.30.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winit-0.30.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winit","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/winit-0.30.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ahash","bytemuck","default","memmap2","percent-encoding","rwh_06","sctk","sctk-adwaita","wayland","wayland-backend","wayland-client","wayland-csd-adwaita","wayland-dlopen","wayland-protocols","wayland-protocols-plasma","x11","x11-dl","x11rb"],"filenames":["/app/target/debug/deps/libwinit-4527bd71a923f76e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinyvec@1.9.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinyvec","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.9.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","tinyvec_macros"],"filenames":["/app/target/debug/deps/libtinyvec-b2518549a14fe151.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tungstenite@0.26.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tungstenite-0.26.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tungstenite","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tungstenite-0.26.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__rustls-tls","data-encoding","handshake","http","httparse","rustls","rustls-pki-types","sha1"],"filenames":["/app/target/debug/deps/libtungstenite-7735a0b8afd2f05d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nostr@0.43.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nostr","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libnostr-e1fcdd908aaab6d2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fontconfig-parser@0.5.8","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fontconfig-parser-0.5.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fontconfig_parser","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fontconfig-parser-0.5.8/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libfontconfig_parser-9a3908fb5cc21e0b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#image@0.25.6","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/image-0.25.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"image","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/image-0.25.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["avif","bmp","dds","default","default-formats","exr","ff","gif","hdr","ico","jpeg","png","pnm","qoi","rayon","tga","tiff","webp"],"filenames":["/app/target/debug/deps/libimage-a1343380233091cf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#egui@0.32.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/egui-0.32.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"egui","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/egui-0.32.0/src/lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["accesskit","bytemuck","default","default_fonts","log","persistence","ron","serde"],"filenames":["/app/target/debug/deps/libegui-a3f9851328ef81cd.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin_egl_sys@0.7.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/glutin_egl_sys-43f81d603217d2d2/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin_glx_sys@0.6.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/glutin_glx_sys-5c60c34055bdf217/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#accesskit_atspi_common@0.12.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/accesskit_atspi_common-0.12.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"accesskit_atspi_common","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/accesskit_atspi_common-0.12.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libaccesskit_atspi_common-f6f569e3a76ceeb2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#atspi@0.25.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atspi-0.25.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"atspi","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atspi-0.25.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async-std","atspi-connection","atspi-proxies","connection","connection-async-std","proxies","proxies-async-std"],"filenames":["/app/target/debug/deps/libatspi-831adccdd56a471d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flatbuffers@25.2.10","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flatbuffers-25.2.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"flatbuffers","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flatbuffers-25.2.10/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libflatbuffers-8b0f3647cecc02cf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slotmap@1.0.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slotmap-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"slotmap","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slotmap-1.0.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libslotmap-bee625a0ba1845a3.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#lmdb-master-sys@0.2.5","linked_libs":["static=lmdb"],"linked_paths":["native=/app/target/debug/build/lmdb-master-sys-7a902c973f780666/out"],"cfgs":[],"env":[],"out_dir":"/app/target/debug/build/lmdb-master-sys-7a902c973f780666/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-rustls@0.26.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-rustls-0.26.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_rustls","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-rustls-0.26.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ring","tls12"],"filenames":["/app/target/debug/deps/libtokio_rustls-d031d53a8e91662e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin@0.32.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin-0.32.3/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin-0.32.3/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["egl","glutin_egl_sys","glutin_glx_sys","glutin_wgl_sys","glx","libloading","wayland","wayland-sys","wgl","windows-sys","x11","x11-dl"],"filenames":["/app/target/debug/build/glutin-643f7e02a52e7754/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#kurbo@0.11.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/kurbo-0.11.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kurbo","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/kurbo-0.11.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libkurbo-43827bdd28160c55.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-queue@0.3.12","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-queue-0.3.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_queue","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-queue-0.3.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libcrossbeam_queue-c1769439834ec9e3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bincode@1.3.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bincode-1.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bincode","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bincode-1.3.3/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libbincode-96345bc587fe16f2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-properties@0.1.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-properties-0.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_properties","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-properties-0.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["general-category"],"filenames":["/app/target/debug/deps/libunicode_properties-8a018cc7a09d64be.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ccc@0.4.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ccc-0.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ccc","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ccc-0.4.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libunicode_ccc-a4794b8732c9f430.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lru@0.16.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lru-0.16.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lru","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lru-0.16.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/liblru-36d4e7c63fd90026.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#litrs@0.4.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/litrs-0.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"litrs","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/litrs-0.4.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/liblitrs-174c5d50bbe52344.rlib","/app/target/debug/deps/liblitrs-174c5d50bbe52344.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustc-hash@2.1.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc-hash-2.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustc_hash","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc-hash-2.1.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/librustc_hash-eccea2369c8e98d2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/byteorder-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"byteorder","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/byteorder-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libbyteorder-128526876fcc1990.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-script@0.5.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-script-0.5.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_script","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-script-0.5.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libunicode_script-8a2ed315c33f9516.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#heed-traits@0.20.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heed-traits-0.20.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"heed_traits","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heed-traits-0.20.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libheed_traits-3e934377673b174c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-bidi-mirroring@0.4.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-bidi-mirroring-0.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_bidi_mirroring","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-bidi-mirroring-0.4.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libunicode_bidi_mirroring-d01135e2d634503e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#siphasher@1.0.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/siphasher-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"siphasher","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/siphasher-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libsiphasher-5b4b36d10fee9677.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#type-map@0.5.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/type-map-0.5.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"type_map","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/type-map-0.5.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libtype_map-63bfed7803589588.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustybuzz@0.20.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustybuzz-0.20.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustybuzz","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustybuzz-0.20.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/librustybuzz-14281f3019bfb84c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#svgtypes@0.15.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/svgtypes-0.15.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"svgtypes","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/svgtypes-0.15.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libsvgtypes-0987cccf1ae1e3d8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#heed-types@0.20.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heed-types-0.20.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"heed_types","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heed-types-0.20.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bincode","serde","serde-bincode","serde-json","serde_json"],"filenames":["/app/target/debug/deps/libheed_types-402ea63cd7cb792d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#document-features@0.2.11","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/document-features-0.2.11/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"document_features","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/document-features-0.2.11/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libdocument_features-1784f5fa92b012e8.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nostr-database@0.43.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-database-0.43.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nostr_database","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-database-0.43.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["flatbuf"],"filenames":["/app/target/debug/deps/libnostr_database-4be80ebb62c3e015.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#synchronoise@1.0.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synchronoise-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"synchronoise","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synchronoise-1.0.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libsynchronoise-e574350875d9a60c.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin@0.32.3","linked_libs":[],"linked_paths":[],"cfgs":["free_unix","x11_platform","wayland_platform","egl_backend","glx_backend"],"env":[],"out_dir":"/app/target/debug/build/glutin-3a2509df5bd092fe/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-tungstenite@0.26.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-tungstenite-0.26.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_tungstenite","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-tungstenite-0.26.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__rustls-tls","connect","default","handshake","rustls","rustls-pki-types","rustls-tls-webpki-roots","stream","tokio-rustls","webpki-roots"],"filenames":["/app/target/debug/deps/libtokio_tungstenite-463c982bcfb0f83f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fontdb@0.23.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fontdb-0.23.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fontdb","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fontdb-0.23.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["fontconfig","fontconfig-parser","fs","memmap","memmap2","std"],"filenames":["/app/target/debug/deps/libfontdb-69a2100b5102ffab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lmdb-master-sys@0.2.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lmdb-master-sys-0.2.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lmdb_master_sys","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lmdb-master-sys-0.2.5/src/lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/liblmdb_master_sys-e63f9b6e5d39906f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#accesskit_unix@0.15.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/accesskit_unix-0.15.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"accesskit_unix","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/accesskit_unix-0.15.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async-io"],"filenames":["/app/target/debug/deps/libaccesskit_unix-ee80a77a9e50b077.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin_egl_sys@0.7.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin_egl_sys-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glutin_egl_sys","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin_egl_sys-0.7.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libglutin_egl_sys-631800747c26d0d2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin_glx_sys@0.6.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin_glx_sys-0.6.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glutin_glx_sys","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin_glx_sys-0.6.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libglutin_glx_sys-b74ba6ffc2820f82.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-utility@0.3.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-utility-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_utility","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-utility-0.3.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libasync_utility-aa2d67e586fe338f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-socks@0.5.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-socks-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_socks","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-socks-0.5.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","tokio"],"filenames":["/app/target/debug/deps/libtokio_socks-36316dfa02564bcd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime_guess2@2.3.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime_guess2-2.3.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime_guess2-2.3.1/build.rs","edition":"2024","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/build/mime_guess2-34284ea561ff81ef/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#inout@0.1.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/inout-0.1.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"inout","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/inout-0.1.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libinout-2ecd8495b2bfecb5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin-winit@0.5.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin-winit-0.5.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin-winit-0.5.0/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["egl","glx","wayland","wgl","x11"],"filenames":["/app/target/debug/build/glutin-winit-7d96899282a56caa/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aho-corasick@1.1.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aho-corasick-1.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aho-corasick-1.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["perf-literal","std"],"filenames":["/app/target/debug/deps/libaho_corasick-f9ce5e77ac23dda1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#simplecss@0.2.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simplecss-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"simplecss","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simplecss-0.2.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libsimplecss-5b00c2a1df47a716.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#page_size@0.6.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_size-0.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"page_size","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_size-0.6.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libpage_size-6f23b18144b95dc7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/app/target/debug/deps/libregex_syntax-7628c20512df11bb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pico-args@0.5.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pico-args-0.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pico_args","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pico-args-0.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","eq-separator"],"filenames":["/app/target/debug/deps/libpico_args-20685e3031dd21cb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#xmlwriter@0.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/xmlwriter-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"xmlwriter","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/xmlwriter-0.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libxmlwriter-b32982c73310ccf4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#self_cell@1.2.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/self_cell-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"self_cell","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/self_cell-1.2.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libself_cell-c854b1158a908d0e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#data-url@0.3.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/data-url-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"data_url","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/data-url-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libdata_url-3483432eef3adbe2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-vo@0.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-vo-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_vo","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-vo-0.1.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libunicode_vo-b895cb1370fa1588.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-bidi@0.3.18","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-bidi-0.3.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_bidi","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-bidi-0.3.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","hardcoded-data","std"],"filenames":["/app/target/debug/deps/libunicode_bidi-127df804271c85f1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#imagesize@0.13.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/imagesize-0.13.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"imagesize","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/imagesize-0.13.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libimagesize-ccb73d4e302e6524.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#self_cell@0.10.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/self_cell-0.10.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"self_cell","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/self_cell-0.10.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libself_cell-5aed704e18ea4314.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.9","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","dfa-onepass","hybrid","meta","nfa-backtrack","nfa-pikevm","nfa-thompson","perf-inline","perf-literal","perf-literal-multisubstring","perf-literal-substring","std","syntax","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment","unicode-word-boundary"],"filenames":["/app/target/debug/deps/libregex_automata-db1ff6a0db0546ec.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#heed@0.20.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heed-0.20.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"heed","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heed-0.20.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","read-txn-no-tls","serde","serde-bincode","serde-json"],"filenames":["/app/target/debug/deps/libheed-4d730caf2ead43cf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#usvg@0.45.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/usvg-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"usvg","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/usvg-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","fontdb","memmap-fonts","rustybuzz","system-fonts","text","unicode-bidi","unicode-script","unicode-vo"],"filenames":["/app/target/debug/deps/libusvg-bf9af5806b313178.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin-winit@0.5.0","linked_libs":[],"linked_paths":[],"cfgs":["free_unix","x11_platform","wayland_platform","egl_backend","glx_backend"],"env":[],"out_dir":"/app/target/debug/build/glutin-winit-b7e1a423a6e66852/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cipher@0.4.4","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cipher-0.4.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cipher","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cipher-0.4.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zeroize"],"filenames":["/app/target/debug/deps/libcipher-73767f8328e7b9d7.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime_guess2@2.3.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["MIME_TYPES_GENERATED_PATH","/mime_types_generated.rs"]],"out_dir":"/app/target/debug/build/mime_guess2-9e6e76bfc0b59ab5/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin@0.32.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin-0.32.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glutin","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin-0.32.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["egl","glutin_egl_sys","glutin_glx_sys","glutin_wgl_sys","glx","libloading","wayland","wayland-sys","wgl","windows-sys","x11","x11-dl"],"filenames":["/app/target/debug/deps/libglutin-4186e06bfe4855d9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-wsocket@0.13.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-wsocket-0.13.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_wsocket","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-wsocket-0.13.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","socks"],"filenames":["/app/target/debug/deps/libasync_wsocket-2366d353aa0b3972.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#accesskit_winit@0.27.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/accesskit_winit-0.27.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"accesskit_winit","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/accesskit_winit-0.27.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["accesskit_unix","async-io","default","rwh_06"],"filenames":["/app/target/debug/deps/libaccesskit_winit-0fd851808f002d51.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#intl-memoizer@0.5.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/intl-memoizer-0.5.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"intl_memoizer","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/intl-memoizer-0.5.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libintl_memoizer-8adc91c86dcbe2e2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arboard@3.6.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arboard-3.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arboard","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arboard-3.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["core-graphics","image","image-data","windows-sys"],"filenames":["/app/target/debug/deps/libarboard-345d7f6bc7c07f86.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fluent-langneg@0.13.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fluent-langneg-0.13.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fluent_langneg","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fluent-langneg-0.13.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libfluent_langneg-222b19b2acc34180.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#intl_pluralrules@7.0.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/intl_pluralrules-7.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"intl_pluralrules","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/intl_pluralrules-7.0.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libintl_pluralrules-c8829c22e2c56543.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smithay-clipboard@0.7.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smithay-clipboard-0.7.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smithay_clipboard","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smithay-clipboard-0.7.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","dlopen"],"filenames":["/app/target/debug/deps/libsmithay_clipboard-dd0ec88f41408517.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ureq@2.12.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ureq-2.12.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ureq","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ureq-2.12.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","gzip","tls"],"filenames":["/app/target/debug/deps/libureq-4d0d689301e3cad3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#webbrowser@1.0.5","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webbrowser-1.0.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webbrowser","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webbrowser-1.0.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libwebbrowser-6631a677f038188a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#universal-hash@0.5.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/universal-hash-0.5.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"universal_hash","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/universal-hash-0.5.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libuniversal_hash-00917804bab23846.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fluent-syntax@0.11.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fluent-syntax-0.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fluent_syntax","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fluent-syntax-0.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libfluent_syntax-f10fee9d893debb9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#enum-map-derive@0.17.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enum-map-derive-0.17.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"enum_map_derive","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enum-map-derive-0.17.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libenum_map_derive-1d5143b4ae4bf251.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicase@2.8.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicase-2.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicase","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicase-2.8.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libunicase-3e5176e8129d926b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime@0.3.17","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime-0.3.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mime","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime-0.3.17/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libmime-50c7f611bed4884a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glow@0.16.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glow-0.16.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glow","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glow-0.16.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libglow-19b99230e39e3a31.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#option-ext@0.2.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/option-ext-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"option_ext","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/option-ext-0.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/liboption_ext-4ce60793fc00835f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#negentropy@0.5.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/negentropy-0.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"negentropy","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/negentropy-0.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/app/target/debug/deps/libnegentropy-b21c57bc74216ec4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#web-time@1.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/web-time-1.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"web_time","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/web-time-1.1.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libweb_time-ded60f5b40b9f3e2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustc-hash@1.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc-hash-1.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustc_hash","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc-hash-1.1.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/librustc_hash-961a70b2006c39c2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#opaque-debug@0.3.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opaque-debug-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"opaque_debug","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opaque-debug-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libopaque_debug-f4f17d06e4d1157d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#atomic-destructor@0.3.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atomic-destructor-0.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"atomic_destructor","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atomic-destructor-0.3.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libatomic_destructor-64508fd7cc9f2561.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fluent-bundle@0.15.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fluent-bundle-0.15.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fluent_bundle","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fluent-bundle-0.15.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libfluent_bundle-c3e552a23c562aec.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#egui-winit@0.32.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/egui-winit-0.32.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"egui_winit","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/egui-winit-0.32.0/src/lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["accesskit","arboard","bytemuck","clipboard","links","serde","smithay-clipboard","wayland","webbrowser","x11"],"filenames":["/app/target/debug/deps/libegui_winit-a59552c98c5e5719.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nostr-relay-pool@0.43.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-relay-pool-0.43.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nostr_relay_pool","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-relay-pool-0.43.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libnostr_relay_pool-8de95cb0a89ce161.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#poly1305@0.8.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/poly1305-0.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"poly1305","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/poly1305-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libpoly1305-da15ffb185157cca.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dirs-sys@0.4.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dirs-sys-0.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dirs_sys","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dirs-sys-0.4.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libdirs_sys-17b30efae775e172.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime_guess2@2.3.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime_guess2-2.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mime_guess2","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime_guess2-2.3.1/src/lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libmime_guess2-ca1bc225be4607d3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#egui_glow@0.32.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/egui_glow-0.32.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"egui_glow","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/egui_glow-0.32.0/src/lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["wayland","x11"],"filenames":["/app/target/debug/deps/libegui_glow-c23fccd55c669f47.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#enum-map@2.7.3","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enum-map-2.7.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"enum_map","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enum-map-2.7.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libenum_map-13a7767bbd18d62e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ehttp@0.5.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ehttp-0.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ehttp","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ehttp-0.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/app/target/debug/deps/libehttp-e84322a6a445071e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin-winit@0.5.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin-winit-0.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glutin_winit","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glutin-winit-0.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["egl","glx","wayland","wgl","x11"],"filenames":["/app/target/debug/deps/libglutin_winit-f903d7ee2bcc6847.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#resvg@0.45.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/resvg-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"resvg","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/resvg-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","gif","image-webp","memmap-fonts","raster-images","system-fonts","text"],"filenames":["/app/target/debug/deps/libresvg-4a1aaf8da0b5ce1d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chacha20@0.9.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chacha20-0.9.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chacha20","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chacha20-0.9.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zeroize"],"filenames":["/app/target/debug/deps/libchacha20-09d9273ca32a2f70.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex@1.11.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-1.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-1.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","perf","perf-backtrack","perf-cache","perf-dfa","perf-inline","perf-literal","perf-onepass","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/app/target/debug/deps/libregex-27fecffdccb9e593.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nostr-lmdb@0.43.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-lmdb-0.43.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nostr_lmdb","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-lmdb-0.43.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libnostr_lmdb-cb7b552d2b337983.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hmac@0.12.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hmac-0.12.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hmac","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hmac-0.12.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libhmac-d1fde873a9e14917.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-executor@0.3.31","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-executor-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_executor","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-executor-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/app/target/debug/deps/libfutures_executor-0e1197f9c35113a1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aead@0.5.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aead-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aead","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aead-0.5.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","getrandom","rand_core"],"filenames":["/app/target/debug/deps/libaead-b1cf8982c1f21ade.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#is-terminal@0.4.16","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/is-terminal-0.4.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"is_terminal","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/is-terminal-0.4.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libis_terminal-42000fd4d23539ae.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#humantime@2.2.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/humantime-2.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"humantime","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/humantime-2.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libhumantime-a94c3eda81859715.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iana-time-zone@0.1.63","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/iana-time-zone-0.1.63/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iana_time_zone","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/iana-time-zone-0.1.63/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["fallback"],"filenames":["/app/target/debug/deps/libiana_time_zone-11a5b6b7b6babd6c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#termcolor@1.4.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/termcolor-1.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"termcolor","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/termcolor-1.4.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libtermcolor-dd83f5698580e824.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#home@0.5.11","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/home-0.5.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"home","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/home-0.5.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libhome-cee573bd98e099ae.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chrono@0.4.41","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chrono","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","android-tzdata","clock","default","iana-time-zone","js-sys","now","oldtime","serde","std","wasm-bindgen","wasmbind","winapi","windows-link"],"filenames":["/app/target/debug/deps/libchrono-fe8753341efe069a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#env_logger@0.10.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_logger-0.10.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"env_logger","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_logger-0.10.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["auto-color","color","default","humantime","regex"],"filenames":["/app/target/debug/deps/libenv_logger-7fc85a30fe9c813b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#eframe@0.32.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/eframe-0.32.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"eframe","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/eframe-0.32.0/src/lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["accesskit","default","default_fonts","glow","persistence","ron","serde","wayland","web_screen_reader","x11"],"filenames":["/app/target/debug/deps/libeframe-c795c996afa5e748.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pbkdf2@0.12.2","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pbkdf2-0.12.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pbkdf2","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pbkdf2-0.12.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","hmac"],"filenames":["/app/target/debug/deps/libpbkdf2-78a4ab7d278532d2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chacha20poly1305@0.10.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chacha20poly1305-0.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chacha20poly1305","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chacha20poly1305-0.10.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","getrandom","rand_core"],"filenames":["/app/target/debug/deps/libchacha20poly1305-87a12798f6da5f79.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures@0.3.31","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","async-await","default","executor","futures-executor","std"],"filenames":["/app/target/debug/deps/libfutures-f14af3acd33f70e0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#egui_extras@0.32.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/egui_extras-0.32.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"egui_extras","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/egui_extras-0.32.0/src/lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["all_loaders","default","file","gif","http","image","resvg","svg","webp"],"filenames":["/app/target/debug/deps/libegui_extras-a25c6b1146e098e6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nostr-sdk@0.43.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nostr_sdk","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","lmdb"],"filenames":["/app/target/debug/deps/libnostr_sdk-7c76180f39f64065.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dirs@5.0.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dirs-5.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dirs","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dirs-5.0.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libdirs-1841c6950a6f1955.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fluent@0.16.1","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fluent-0.16.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fluent","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fluent-0.16.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/libfluent-a41c089271406598.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha2@0.10.9","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sha2-0.10.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha2","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sha2-0.10.9/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/app/target/debug/deps/libsha2-2a9e1fd5af1aafac.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rpassword@2.1.0","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rpassword-2.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rpassword","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rpassword-2.1.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/app/target/debug/deps/librpassword-da3695afb74b24e9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.21.7","manifest_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.21.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.21.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/app/target/debug/deps/libbase64-8f6ac19e81e48ded.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: could not find `RelayMetadata` in `nostr`\n    --> src/ui.rs:1222:73\n     |\n1222 | ...                   Some(nostr::RelayMetadata::Read)\n     |                                   ^^^^^^^^^^^^^ could not find `RelayMetadata` in `nostr`\n     |\nhelp: consider importing this enum\n     |\n1    + use nostr_sdk::nips::nip65::RelayMetadata;\n     |\nhelp: if you import `RelayMetadata`, refer to it directly\n     |\n1222 -                                                             Some(nostr::RelayMetadata::Read)\n1222 +                                                             Some(RelayMetadata::Read)\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this enum","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use nostr_sdk::nips::nip65::RelayMetadata;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use eframe::{egui::{self, Margin}};"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `RelayMetadata`, refer to it directly","rendered":null,"spans":[{"byte_end":79480,"byte_start":79473,"column_end":73,"column_start":66,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":1222,"line_start":1222,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":73,"highlight_start":66,"text":"                                                            Some(nostr::RelayMetadata::Read)"}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: could not find `RelayMetadata` in `nostr`","spans":[{"byte_end":79493,"byte_start":79480,"column_end":86,"column_start":73,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"could not find `RelayMetadata` in `nostr`","line_end":1222,"line_start":1222,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":86,"highlight_start":73,"text":"                                                            Some(nostr::RelayMetadata::Read)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: could not find `RelayMetadata` in `nostr`\n    --> src/ui.rs:1224:73\n     |\n1224 | ...                   Some(nostr::RelayMetadata::Write)\n     |                                   ^^^^^^^^^^^^^ could not find `RelayMetadata` in `nostr`\n     |\nhelp: consider importing this enum\n     |\n1    + use nostr_sdk::nips::nip65::RelayMetadata;\n     |\nhelp: if you import `RelayMetadata`, refer to it directly\n     |\n1224 -                                                             Some(nostr::RelayMetadata::Write)\n1224 +                                                             Some(RelayMetadata::Write)\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this enum","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use nostr_sdk::nips::nip65::RelayMetadata;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use eframe::{egui::{self, Margin}};"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `RelayMetadata`, refer to it directly","rendered":null,"spans":[{"byte_end":79668,"byte_start":79661,"column_end":73,"column_start":66,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":1224,"line_start":1224,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":73,"highlight_start":66,"text":"                                                            Some(nostr::RelayMetadata::Write)"}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: could not find `RelayMetadata` in `nostr`","spans":[{"byte_end":79681,"byte_start":79668,"column_end":86,"column_start":73,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"could not find `RelayMetadata` in `nostr`","line_end":1224,"line_start":1224,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":86,"highlight_start":73,"text":"                                                            Some(nostr::RelayMetadata::Write)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: could not find `RelayMetadata` in `nostr`\n   --> src/nostr_client.rs:191:33\n    |\n191 |                     Some(nostr::RelayMetadata::Write) | None => {\n    |                                 ^^^^^^^^^^^^^ could not find `RelayMetadata` in `nostr`\n    |\nhelp: consider importing this enum\n    |\n1   + use nostr_sdk::nips::nip65::RelayMetadata;\n    |\nhelp: if you import `RelayMetadata`, refer to it directly\n    |\n191 -                     Some(nostr::RelayMetadata::Write) | None => {\n191 +                     Some(RelayMetadata::Write) | None => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this enum","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use nostr_sdk::nips::nip65::RelayMetadata;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use futures::future::join_all;"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `RelayMetadata`, refer to it directly","rendered":null,"spans":[{"byte_end":8237,"byte_start":8230,"column_end":33,"column_start":26,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":191,"line_start":191,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":33,"highlight_start":26,"text":"                    Some(nostr::RelayMetadata::Write) | None => {"}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: could not find `RelayMetadata` in `nostr`","spans":[{"byte_end":8250,"byte_start":8237,"column_end":46,"column_start":33,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":"could not find `RelayMetadata` in `nostr`","line_end":191,"line_start":191,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":33,"text":"                    Some(nostr::RelayMetadata::Write) | None => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: could not find `RelayMetadata` in `nostr`\n   --> src/nostr_client.rs:194:33\n    |\n194 |                     Some(nostr::RelayMetadata::Read) => {}\n    |                                 ^^^^^^^^^^^^^ could not find `RelayMetadata` in `nostr`\n    |\nhelp: consider importing this enum\n    |\n1   + use nostr_sdk::nips::nip65::RelayMetadata;\n    |\nhelp: if you import `RelayMetadata`, refer to it directly\n    |\n194 -                     Some(nostr::RelayMetadata::Read) => {}\n194 +                     Some(RelayMetadata::Read) => {}\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this enum","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use nostr_sdk::nips::nip65::RelayMetadata;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use futures::future::join_all;"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `RelayMetadata`, refer to it directly","rendered":null,"spans":[{"byte_end":8385,"byte_start":8378,"column_end":33,"column_start":26,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":194,"line_start":194,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":33,"highlight_start":26,"text":"                    Some(nostr::RelayMetadata::Read) => {}"}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: could not find `RelayMetadata` in `nostr`","spans":[{"byte_end":8398,"byte_start":8385,"column_end":46,"column_start":33,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":"could not find `RelayMetadata` in `nostr`","line_end":194,"line_start":194,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":33,"text":"                    Some(nostr::RelayMetadata::Read) => {}"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/ui.rs:182:44\n    |\n182 |     let nip02_filter_id = client.subscribe(vec![nip02_filter], Some(SubscribeAutoCloseOptions::default())).await;\n    |                                  --------- ^^^^^^^^^^^^^^^^^^ expected `Filter`, found `Vec<Filter>`\n    |                                  |\n    |                                  arguments to this method are incorrect\n    |\n    = note: expected struct `nostr::Filter`\n               found struct `std::vec::Vec<nostr::Filter>`\nnote: method defined here\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs:564:18\n    |\n564 |     pub async fn subscribe(\n    |                  ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `nostr::Filter`\n   found struct `std::vec::Vec<nostr::Filter>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":18730,"byte_start":18721,"column_end":27,"column_start":18,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs","is_primary":true,"label":null,"line_end":564,"line_start":564,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":18,"text":"    pub async fn subscribe("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":7354,"byte_start":7336,"column_end":62,"column_start":44,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"expected `Filter`, found `Vec<Filter>`","line_end":182,"line_start":182,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":44,"text":"    let nip02_filter_id = client.subscribe(vec![nip02_filter], Some(SubscribeAutoCloseOptions::default())).await;"}]},{"byte_end":7335,"byte_start":7326,"column_end":43,"column_start":34,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":182,"line_start":182,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":34,"text":"    let nip02_filter_id = client.subscribe(vec![nip02_filter], Some(SubscribeAutoCloseOptions::default())).await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: `&Tags` is not an iterator\n   --> src/ui.rs:195:36\n    |\n195 |                         for tag in &event.tags { if let Tag::PublicKey { public_key, .. } = tag { followed_pubkeys.insert(*public_key); } }\n    |                                    ^^^^^^^^^^^ `&Tags` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&Tags`\n    = note: required for `&Tags` to implement `IntoIterator`\nhelp: consider removing the leading `&`-reference\n    |\n195 -                         for tag in &event.tags { if let Tag::PublicKey { public_key, .. } = tag { followed_pubkeys.insert(*public_key); } }\n195 +                         for tag in event.tags { if let Tag::PublicKey { public_key, .. } = tag { followed_pubkeys.insert(*public_key); } }\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Iterator` is not implemented for `&Tags`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `&Tags` to implement `IntoIterator`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider removing the leading `&`-reference","rendered":null,"spans":[{"byte_end":8015,"byte_start":8014,"column_end":37,"column_start":36,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":195,"line_start":195,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":36,"text":"                        for tag in &event.tags { if let Tag::PublicKey { public_key, .. } = tag { followed_pubkeys.insert(*public_key); } }"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`&Tags` is not an iterator","spans":[{"byte_end":8025,"byte_start":8014,"column_end":47,"column_start":36,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of `for` loop","span":{"byte_end":8025,"byte_start":8014,"column_end":47,"column_start":36,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":null,"line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":36,"text":"                        for tag in &event.tags { if let Tag::PublicKey { public_key, .. } = tag { followed_pubkeys.insert(*public_key); } }"}]}},"file_name":"src/ui.rs","is_primary":true,"label":"`&Tags` is not an iterator","line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":36,"text":"                        for tag in &event.tags { if let Tag::PublicKey { public_key, .. } = tag { followed_pubkeys.insert(*public_key); } }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> src/ui.rs:195:57\n    |\n195 |                         for tag in &event.tags { if let Tag::PublicKey { public_key, .. } = tag { followed_pubkeys.insert(*public_key); } }\n    |                                                         ^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `PublicKey` implemented for `nostr::Tag`, you could use the fully-qualified path\n    |\n195 -                         for tag in &event.tags { if let Tag::PublicKey { public_key, .. } = tag { followed_pubkeys.insert(*public_key); } }\n195 +                         for tag in &event.tags { if let <nostr::Tag as Example>::PublicKey { public_key, .. } = tag { followed_pubkeys.insert(*public_key); } }\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `PublicKey` implemented for `nostr::Tag`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":8049,"byte_start":8035,"column_end":71,"column_start":57,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":195,"line_start":195,"suggested_replacement":"<nostr::Tag as Example>::PublicKey","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":71,"highlight_start":57,"text":"                        for tag in &event.tags { if let Tag::PublicKey { public_key, .. } = tag { followed_pubkeys.insert(*public_key); } }"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":8049,"byte_start":8035,"column_end":71,"column_start":57,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":57,"text":"                        for tag in &event.tags { if let Tag::PublicKey { public_key, .. } = tag { followed_pubkeys.insert(*public_key); } }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/ui.rs:203:24\n    |\n203 |     client.unsubscribe(nip02_filter_id).await;\n    |            ----------- ^^^^^^^^^^^^^^^ expected `&SubscriptionId`, found `Result<Output<SubscriptionId>, Error>`\n    |            |\n    |            arguments to this method are incorrect\n    |\n    = note: expected reference `&SubscriptionId`\n                    found enum `Result<nostr_sdk::nostr_relay_pool::Output<SubscriptionId>, nostr_sdk::client::Error>`\nnote: method defined here\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs:672:18\n    |\n672 |     pub async fn unsubscribe(&self, id: &SubscriptionId) {\n    |                  ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&SubscriptionId`\n        found enum `Result<nostr_sdk::nostr_relay_pool::Output<SubscriptionId>, nostr_sdk::client::Error>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":22345,"byte_start":22334,"column_end":29,"column_start":18,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs","is_primary":true,"label":null,"line_end":672,"line_start":672,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":18,"text":"    pub async fn unsubscribe(&self, id: &SubscriptionId) {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8312,"byte_start":8297,"column_end":39,"column_start":24,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"expected `&SubscriptionId`, found `Result<Output<SubscriptionId>, Error>`","line_end":203,"line_start":203,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":24,"text":"    client.unsubscribe(nip02_filter_id).await;"}]},{"byte_end":8296,"byte_start":8285,"column_end":23,"column_start":12,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":203,"line_start":203,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":12,"text":"    client.unsubscribe(nip02_filter_id).await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> src/ui.rs:252:5\n    |\n252 |     temp_discover_client.shutdown().await?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Try` is not implemented for `()`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the `?` operator can only be applied to values that implement `Try`","spans":[{"byte_end":10237,"byte_start":10199,"column_end":43,"column_start":5,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":10237,"byte_start":10199,"column_end":43,"column_start":5,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":null,"line_end":252,"line_start":252,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":5,"text":"    temp_discover_client.shutdown().await?;"}]}},"file_name":"src/ui.rs","is_primary":true,"label":"the `?` operator cannot be applied to type `()`","line_end":252,"line_start":252,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":5,"text":"    temp_discover_client.shutdown().await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `ParameterizedReplaceable` found for enum `nostr::Kind` in the current scope\n   --> src/ui.rs:263:90\n    |\n263 |         let timeline_filter = Filter::new().authors(followed_pubkeys.clone()).kind(Kind::ParameterizedReplaceable(30315)).limit(20);\n    |                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `Kind`\n    |\nnote: if you're trying to build a new `nostr::Kind`, consider using `nostr::Kind::from_u16` which returns `nostr::Kind`\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/kind.rs:197:5\n    |\n197 |     pub fn from_u16(kind: u16) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: there is a method `is_replaceable` with a similar name, but with different arguments\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/kind.rs:231:5\n    |\n231 |     pub fn is_replaceable(&self) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `nostr::Kind`, consider using `nostr::Kind::from_u16` which returns `nostr::Kind`","rendered":null,"spans":[{"byte_end":12508,"byte_start":12474,"column_end":39,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/kind.rs","is_primary":true,"label":null,"line_end":197,"line_start":197,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":5,"text":"    pub fn from_u16(kind: u16) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"there is a method `is_replaceable` with a similar name, but with different arguments","rendered":null,"spans":[{"byte_end":13493,"byte_start":13457,"column_end":41,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/kind.rs","is_primary":true,"label":null,"line_end":231,"line_start":231,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":5,"text":"    pub fn is_replaceable(&self) -> bool {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `ParameterizedReplaceable` found for enum `nostr::Kind` in the current scope","spans":[{"byte_end":10770,"byte_start":10746,"column_end":114,"column_start":90,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"variant or associated item not found in `Kind`","line_end":263,"line_start":263,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":114,"highlight_start":90,"text":"        let timeline_filter = Filter::new().authors(followed_pubkeys.clone()).kind(Kind::ParameterizedReplaceable(30315)).limit(20);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `get_events_of` found for struct `nostr_sdk::Client` in the current scope\n   --> src/ui.rs:264:47\n    |\n264 |         let status_events = temp_fetch_client.get_events_of(vec![timeline_filter], Some(Duration::from_secs(10))).await?;\n    |                                               ^^^^^^^^^^^^^\n    |\nhelp: there is a method `fetch_events_from` with a similar name, but with different arguments\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs:770:5\n    |\n770 | /     pub async fn fetch_events_from<I, U>(\n771 | |         &self,\n772 | |         urls: I,\n773 | |         filter: Filter,\n...   |\n778 | |         U: TryIntoUrl,\n779 | |         pool::Error: From<<U as TryIntoUrl>::Err>,\n    | |__________________________________________________^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is a method `fetch_events_from` with a similar name, but with different arguments","rendered":null,"spans":[{"byte_end":25781,"byte_start":25511,"column_end":51,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs","is_primary":true,"label":null,"line_end":779,"line_start":770,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":5,"text":"    pub async fn fetch_events_from<I, U>("},{"highlight_end":15,"highlight_start":1,"text":"        &self,"},{"highlight_end":17,"highlight_start":1,"text":"        urls: I,"},{"highlight_end":24,"highlight_start":1,"text":"        filter: Filter,"},{"highlight_end":27,"highlight_start":1,"text":"        timeout: Duration,"},{"highlight_end":31,"highlight_start":1,"text":"    ) -> Result<Events, Error>"},{"highlight_end":10,"highlight_start":1,"text":"    where"},{"highlight_end":35,"highlight_start":1,"text":"        I: IntoIterator<Item = U>,"},{"highlight_end":23,"highlight_start":1,"text":"        U: TryIntoUrl,"},{"highlight_end":51,"highlight_start":1,"text":"        pool::Error: From<<U as TryIntoUrl>::Err>,"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `get_events_of` found for struct `nostr_sdk::Client` in the current scope","spans":[{"byte_end":10849,"byte_start":10836,"column_end":60,"column_start":47,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":264,"line_start":264,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":47,"text":"        let status_events = temp_fetch_client.get_events_of(vec![timeline_filter], Some(Duration::from_secs(10))).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `get_events_of` found for struct `nostr_sdk::Client` in the current scope\n   --> src/ui.rs:271:53\n    |\n271 |             let metadata_events = temp_fetch_client.get_events_of(vec![metadata_filter], Some(Duration::from_secs(5))).await?;\n    |                                                     ^^^^^^^^^^^^^\n    |\nhelp: there is a method `fetch_events_from` with a similar name, but with different arguments\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs:770:5\n    |\n770 | /     pub async fn fetch_events_from<I, U>(\n771 | |         &self,\n772 | |         urls: I,\n773 | |         filter: Filter,\n...   |\n778 | |         U: TryIntoUrl,\n779 | |         pool::Error: From<<U as TryIntoUrl>::Err>,\n    | |__________________________________________________^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is a method `fetch_events_from` with a similar name, but with different arguments","rendered":null,"spans":[{"byte_end":25781,"byte_start":25511,"column_end":51,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs","is_primary":true,"label":null,"line_end":779,"line_start":770,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":5,"text":"    pub async fn fetch_events_from<I, U>("},{"highlight_end":15,"highlight_start":1,"text":"        &self,"},{"highlight_end":17,"highlight_start":1,"text":"        urls: I,"},{"highlight_end":24,"highlight_start":1,"text":"        filter: Filter,"},{"highlight_end":27,"highlight_start":1,"text":"        timeout: Duration,"},{"highlight_end":31,"highlight_start":1,"text":"    ) -> Result<Events, Error>"},{"highlight_end":10,"highlight_start":1,"text":"    where"},{"highlight_end":35,"highlight_start":1,"text":"        I: IntoIterator<Item = U>,"},{"highlight_end":23,"highlight_start":1,"text":"        U: TryIntoUrl,"},{"highlight_end":51,"highlight_start":1,"text":"        pool::Error: From<<U as TryIntoUrl>::Err>,"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `get_events_of` found for struct `nostr_sdk::Client` in the current scope","spans":[{"byte_end":11405,"byte_start":11392,"column_end":66,"column_start":53,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":271,"line_start":271,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":53,"text":"            let metadata_events = temp_fetch_client.get_events_of(vec![metadata_filter], Some(Duration::from_secs(5))).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> src/ui.rs:282:28\n    |\n282 |                     if let Tag::Emoji { shortcode, url } = tag {\n    |                            ^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Emoji` implemented for `nostr::Tag`, you could use the fully-qualified path\n    |\n282 -                     if let Tag::Emoji { shortcode, url } = tag {\n282 +                     if let <nostr::Tag as Example>::Emoji { shortcode, url } = tag {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Emoji` implemented for `nostr::Tag`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":11993,"byte_start":11983,"column_end":38,"column_start":28,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":282,"line_start":282,"suggested_replacement":"<nostr::Tag as Example>::Emoji","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":38,"highlight_start":28,"text":"                    if let Tag::Emoji { shortcode, url } = tag {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":11993,"byte_start":11983,"column_end":38,"column_start":28,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":282,"line_start":282,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":28,"text":"                    if let Tag::Emoji { shortcode, url } = tag {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> src/ui.rs:299:9\n    |\n299 |         temp_fetch_client.shutdown().await?;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Try` is not implemented for `()`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the `?` operator can only be applied to values that implement `Try`","spans":[{"byte_end":12688,"byte_start":12653,"column_end":44,"column_start":9,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":12688,"byte_start":12653,"column_end":44,"column_start":9,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":null,"line_end":299,"line_start":299,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":9,"text":"        temp_fetch_client.shutdown().await?;"}]}},"file_name":"src/ui.rs","is_primary":true,"label":"the `?` operator cannot be applied to type `()`","line_end":299,"line_start":299,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":9,"text":"        temp_fetch_client.shutdown().await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `timeout` found for struct `ClientOptions` in the current scope\n  --> src/nostr_client.rs:18:38\n   |\n18 |     let client_opts = Options::new().timeout(Some(Duration::from_secs(30)));\n   |                                      ^^^^^^^ method not found in `ClientOptions`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `timeout` found for struct `ClientOptions` in the current scope","spans":[{"byte_end":751,"byte_start":744,"column_end":45,"column_start":38,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":"method not found in `ClientOptions`","line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":38,"text":"    let client_opts = Options::new().timeout(Some(Duration::from_secs(30)));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/nostr_client.rs:49:55\n    |\n49  |     let timeout_filter_id = discover_client.subscribe(vec![filter], Some(SubscribeAutoCloseOptions::default())).await;\n    |                                             --------- ^^^^^^^^^^^^ expected `Filter`, found `Vec<Filter>`\n    |                                             |\n    |                                             arguments to this method are incorrect\n    |\n    = note: expected struct `nostr::Filter`\n               found struct `std::vec::Vec<nostr::Filter>`\nnote: method defined here\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs:564:18\n    |\n564 |     pub async fn subscribe(\n    |                  ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `nostr::Filter`\n   found struct `std::vec::Vec<nostr::Filter>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":18730,"byte_start":18721,"column_end":27,"column_start":18,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs","is_primary":true,"label":null,"line_end":564,"line_start":564,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":18,"text":"    pub async fn subscribe("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2132,"byte_start":2120,"column_end":67,"column_start":55,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":"expected `Filter`, found `Vec<Filter>`","line_end":49,"line_start":49,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":55,"text":"    let timeout_filter_id = discover_client.subscribe(vec![filter], Some(SubscribeAutoCloseOptions::default())).await;"}]},{"byte_end":2119,"byte_start":2110,"column_end":54,"column_start":45,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":49,"line_start":49,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":45,"text":"    let timeout_filter_id = discover_client.subscribe(vec![filter], Some(SubscribeAutoCloseOptions::default())).await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: `&Tags` is not an iterator\n  --> src/nostr_client.rs:64:36\n   |\n64 |                         for tag in &event.tags {\n   |                                    ^^^^^^^^^^^ `&Tags` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `&Tags`\n   = note: required for `&Tags` to implement `IntoIterator`\nhelp: consider removing the leading `&`-reference\n   |\n64 -                         for tag in &event.tags {\n64 +                         for tag in event.tags {\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Iterator` is not implemented for `&Tags`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `&Tags` to implement `IntoIterator`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider removing the leading `&`-reference","rendered":null,"spans":[{"byte_end":2986,"byte_start":2985,"column_end":37,"column_start":36,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":64,"line_start":64,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":36,"text":"                        for tag in &event.tags {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`&Tags` is not an iterator","spans":[{"byte_end":2996,"byte_start":2985,"column_end":47,"column_start":36,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of `for` loop","span":{"byte_end":2996,"byte_start":2985,"column_end":47,"column_start":36,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":false,"label":null,"line_end":64,"line_start":64,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":36,"text":"                        for tag in &event.tags {"}]}},"file_name":"src/nostr_client.rs","is_primary":true,"label":"`&Tags` is not an iterator","line_end":64,"line_start":64,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":36,"text":"                        for tag in &event.tags {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no associated item named `RelayMetadata` found for struct `nostr::Tag` in the current scope\n   --> src/nostr_client.rs:65:41\n    |\n65  | ...                   if let Tag::RelayMetadata(url, policy) = tag {\n    |                                   ^^^^^^^^^^^^^ associated item not found in `nostr::Tag`\n    |\nhelp: there is an associated function `relay_metadata` with a similar name\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs:372:5\n    |\n372 |     pub fn relay_metadata(relay_url: RelayUrl, metadata: Option<RelayMetadata>) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is an associated function `relay_metadata` with a similar name","rendered":null,"spans":[{"byte_end":10238,"byte_start":10155,"column_end":88,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs","is_primary":true,"label":null,"line_end":372,"line_start":372,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":88,"highlight_start":5,"text":"    pub fn relay_metadata(relay_url: RelayUrl, metadata: Option<RelayMetadata>) -> Self {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no associated item named `RelayMetadata` found for struct `nostr::Tag` in the current scope","spans":[{"byte_end":3052,"byte_start":3039,"column_end":54,"column_start":41,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":"associated item not found in `nostr::Tag`","line_end":65,"line_start":65,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":41,"text":"                            if let Tag::RelayMetadata(url, policy) = tag {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/nostr_client.rs:83:33\n    |\n83  |     discover_client.unsubscribe(timeout_filter_id).await;\n    |                     ----------- ^^^^^^^^^^^^^^^^^ expected `&SubscriptionId`, found `Result<Output<SubscriptionId>, Error>`\n    |                     |\n    |                     arguments to this method are incorrect\n    |\n    = note: expected reference `&SubscriptionId`\n                    found enum `Result<nostr_sdk::nostr_relay_pool::Output<SubscriptionId>, nostr_sdk::client::Error>`\nnote: method defined here\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs:672:18\n    |\n672 |     pub async fn unsubscribe(&self, id: &SubscriptionId) {\n    |                  ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&SubscriptionId`\n        found enum `Result<nostr_sdk::nostr_relay_pool::Output<SubscriptionId>, nostr_sdk::client::Error>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":22345,"byte_start":22334,"column_end":29,"column_start":18,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs","is_primary":true,"label":null,"line_end":672,"line_start":672,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":18,"text":"    pub async fn unsubscribe(&self, id: &SubscriptionId) {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":3822,"byte_start":3805,"column_end":50,"column_start":33,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":"expected `&SubscriptionId`, found `Result<Output<SubscriptionId>, Error>`","line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":33,"text":"    discover_client.unsubscribe(timeout_filter_id).await;"}]},{"byte_end":3804,"byte_start":3793,"column_end":32,"column_start":21,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":21,"text":"    discover_client.unsubscribe(timeout_filter_id).await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the `?` operator can only be applied to values that implement `Try`\n  --> src/nostr_client.rs:84:5\n   |\n84 |     discover_client.shutdown().await?;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `()`\n   |\n   = help: the trait `Try` is not implemented for `()`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Try` is not implemented for `()`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the `?` operator can only be applied to values that implement `Try`","spans":[{"byte_end":3868,"byte_start":3835,"column_end":38,"column_start":5,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":3868,"byte_start":3835,"column_end":38,"column_start":5,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":false,"label":null,"line_end":84,"line_start":84,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    discover_client.shutdown().await?;"}]}},"file_name":"src/nostr_client.rs","is_primary":true,"label":"the `?` operator cannot be applied to type `()`","line_end":84,"line_start":84,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    discover_client.shutdown().await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: `nostr_sdk::RelayStatus` is not a future\n   --> src/nostr_client.rs:161:37\n    |\n161 |         let status = relay.status().await;\n    |                                    -^^^^^\n    |                                    ||\n    |                                    |`nostr_sdk::RelayStatus` is not a future\n    |                                    help: remove the `.await`\n    |\n    = help: the trait `futures::Future` is not implemented for `nostr_sdk::RelayStatus`\n    = note: nostr_sdk::RelayStatus must be a future or must implement `IntoFuture` to be awaited\n    = note: required for `nostr_sdk::RelayStatus` to implement `std::future::IntoFuture`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `futures::Future` is not implemented for `nostr_sdk::RelayStatus`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"nostr_sdk::RelayStatus must be a future or must implement `IntoFuture` to be awaited","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `nostr_sdk::RelayStatus` to implement `std::future::IntoFuture`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the `.await`","rendered":null,"spans":[{"byte_end":7047,"byte_start":7041,"column_end":42,"column_start":36,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":161,"line_start":161,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":42,"highlight_start":36,"text":"        let status = relay.status().await;"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`nostr_sdk::RelayStatus` is not a future","spans":[{"byte_end":7047,"byte_start":7042,"column_end":42,"column_start":37,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of `await` expression","span":{"byte_end":7047,"byte_start":7042,"column_end":42,"column_start":37,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":false,"label":null,"line_end":161,"line_start":161,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":37,"text":"        let status = relay.status().await;"}]}},"file_name":"src/nostr_client.rs","is_primary":true,"label":"`nostr_sdk::RelayStatus` is not a future","line_end":161,"line_start":161,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":37,"text":"        let status = relay.status().await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `get_events_of` found for reference `&nostr_sdk::Client` in the current scope\n   --> src/nostr_client.rs:184:34\n    |\n184 |     let events = discover_client.get_events_of(vec![filter], Some(Duration::from_secs(10))).await?;\n    |                                  ^^^^^^^^^^^^^\n    |\nhelp: there is a method `fetch_events_from` with a similar name, but with different arguments\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs:770:5\n    |\n770 | /     pub async fn fetch_events_from<I, U>(\n771 | |         &self,\n772 | |         urls: I,\n773 | |         filter: Filter,\n...   |\n778 | |         U: TryIntoUrl,\n779 | |         pool::Error: From<<U as TryIntoUrl>::Err>,\n    | |__________________________________________________^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is a method `fetch_events_from` with a similar name, but with different arguments","rendered":null,"spans":[{"byte_end":25781,"byte_start":25511,"column_end":51,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs","is_primary":true,"label":null,"line_end":779,"line_start":770,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":5,"text":"    pub async fn fetch_events_from<I, U>("},{"highlight_end":15,"highlight_start":1,"text":"        &self,"},{"highlight_end":17,"highlight_start":1,"text":"        urls: I,"},{"highlight_end":24,"highlight_start":1,"text":"        filter: Filter,"},{"highlight_end":27,"highlight_start":1,"text":"        timeout: Duration,"},{"highlight_end":31,"highlight_start":1,"text":"    ) -> Result<Events, Error>"},{"highlight_end":10,"highlight_start":1,"text":"    where"},{"highlight_end":35,"highlight_start":1,"text":"        I: IntoIterator<Item = U>,"},{"highlight_end":23,"highlight_start":1,"text":"        U: TryIntoUrl,"},{"highlight_end":51,"highlight_start":1,"text":"        pool::Error: From<<U as TryIntoUrl>::Err>,"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `get_events_of` found for reference `&nostr_sdk::Client` in the current scope","spans":[{"byte_end":7942,"byte_start":7929,"column_end":47,"column_start":34,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":184,"line_start":184,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":34,"text":"    let events = discover_client.get_events_of(vec![filter], Some(Duration::from_secs(10))).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no associated item named `RelayMetadata` found for struct `nostr::Tag` in the current scope\n   --> src/nostr_client.rs:189:25\n    |\n189 |             if let Tag::RelayMetadata(url, policy) = tag {\n    |                         ^^^^^^^^^^^^^ associated item not found in `nostr::Tag`\n    |\nhelp: there is an associated function `relay_metadata` with a similar name\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs:372:5\n    |\n372 |     pub fn relay_metadata(relay_url: RelayUrl, metadata: Option<RelayMetadata>) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is an associated function `relay_metadata` with a similar name","rendered":null,"spans":[{"byte_end":10238,"byte_start":10155,"column_end":88,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs","is_primary":true,"label":null,"line_end":372,"line_start":372,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":88,"highlight_start":5,"text":"    pub fn relay_metadata(relay_url: RelayUrl, metadata: Option<RelayMetadata>) -> Self {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no associated item named `RelayMetadata` found for struct `nostr::Tag` in the current scope","spans":[{"byte_end":8152,"byte_start":8139,"column_end":38,"column_start":25,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":"associated item not found in `nostr::Tag`","line_end":189,"line_start":189,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":25,"text":"            if let Tag::RelayMetadata(url, policy) = tag {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/nostr_client.rs:206:44\n    |\n206 |     let nip01_filter_id = client.subscribe(vec![nip01_filter], Some(SubscribeAutoCloseOptions::default())).await;\n    |                                  --------- ^^^^^^^^^^^^^^^^^^ expected `Filter`, found `Vec<Filter>`\n    |                                  |\n    |                                  arguments to this method are incorrect\n    |\n    = note: expected struct `nostr::Filter`\n               found struct `std::vec::Vec<nostr::Filter>`\nnote: method defined here\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs:564:18\n    |\n564 |     pub async fn subscribe(\n    |                  ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `nostr::Filter`\n   found struct `std::vec::Vec<nostr::Filter>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":18730,"byte_start":18721,"column_end":27,"column_start":18,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs","is_primary":true,"label":null,"line_end":564,"line_start":564,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":18,"text":"    pub async fn subscribe("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8879,"byte_start":8861,"column_end":62,"column_start":44,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":"expected `Filter`, found `Vec<Filter>`","line_end":206,"line_start":206,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":44,"text":"    let nip01_filter_id = client.subscribe(vec![nip01_filter], Some(SubscribeAutoCloseOptions::default())).await;"}]},{"byte_end":8860,"byte_start":8851,"column_end":43,"column_start":34,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":206,"line_start":206,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":34,"text":"    let nip01_filter_id = client.subscribe(vec![nip01_filter], Some(SubscribeAutoCloseOptions::default())).await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/nostr_client.rs:228:24\n    |\n228 |     client.unsubscribe(nip01_filter_id).await;\n    |            ----------- ^^^^^^^^^^^^^^^ expected `&SubscriptionId`, found `Result<Output<SubscriptionId>, Error>`\n    |            |\n    |            arguments to this method are incorrect\n    |\n    = note: expected reference `&SubscriptionId`\n                    found enum `Result<nostr_sdk::nostr_relay_pool::Output<SubscriptionId>, nostr_sdk::client::Error>`\nnote: method defined here\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs:672:18\n    |\n672 |     pub async fn unsubscribe(&self, id: &SubscriptionId) {\n    |                  ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&SubscriptionId`\n        found enum `Result<nostr_sdk::nostr_relay_pool::Output<SubscriptionId>, nostr_sdk::client::Error>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":22345,"byte_start":22334,"column_end":29,"column_start":18,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs","is_primary":true,"label":null,"line_end":672,"line_start":672,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":18,"text":"    pub async fn unsubscribe(&self, id: &SubscriptionId) {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":9759,"byte_start":9744,"column_end":39,"column_start":24,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":"expected `&SubscriptionId`, found `Result<Output<SubscriptionId>, Error>`","line_end":228,"line_start":228,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":24,"text":"    client.unsubscribe(nip01_filter_id).await;"}]},{"byte_end":9743,"byte_start":9732,"column_end":23,"column_start":12,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":228,"line_start":228,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":12,"text":"    client.unsubscribe(nip01_filter_id).await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `get_events_of` found for reference `&nostr_sdk::Client` in the current scope\n   --> src/nostr_client.rs:249:25\n    |\n249 |     let events = client.get_events_of(vec![filter], Some(Duration::from_secs(10))).await?;\n    |                         ^^^^^^^^^^^^^\n    |\nhelp: there is a method `fetch_events_from` with a similar name, but with different arguments\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs:770:5\n    |\n770 | /     pub async fn fetch_events_from<I, U>(\n771 | |         &self,\n772 | |         urls: I,\n773 | |         filter: Filter,\n...   |\n778 | |         U: TryIntoUrl,\n779 | |         pool::Error: From<<U as TryIntoUrl>::Err>,\n    | |__________________________________________________^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is a method `fetch_events_from` with a similar name, but with different arguments","rendered":null,"spans":[{"byte_end":25781,"byte_start":25511,"column_end":51,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs","is_primary":true,"label":null,"line_end":779,"line_start":770,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":5,"text":"    pub async fn fetch_events_from<I, U>("},{"highlight_end":15,"highlight_start":1,"text":"        &self,"},{"highlight_end":17,"highlight_start":1,"text":"        urls: I,"},{"highlight_end":24,"highlight_start":1,"text":"        filter: Filter,"},{"highlight_end":27,"highlight_start":1,"text":"        timeout: Duration,"},{"highlight_end":31,"highlight_start":1,"text":"    ) -> Result<Events, Error>"},{"highlight_end":10,"highlight_start":1,"text":"    where"},{"highlight_end":35,"highlight_start":1,"text":"        I: IntoIterator<Item = U>,"},{"highlight_end":23,"highlight_start":1,"text":"        U: TryIntoUrl,"},{"highlight_end":51,"highlight_start":1,"text":"        pool::Error: From<<U as TryIntoUrl>::Err>,"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `get_events_of` found for reference `&nostr_sdk::Client` in the current scope","spans":[{"byte_end":10721,"byte_start":10708,"column_end":38,"column_start":25,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":249,"line_start":249,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":25,"text":"    let events = client.get_events_of(vec![filter], Some(Duration::from_secs(10))).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> src/nostr_client.rs:258:16\n    |\n258 |         if let Tag::PublicKey { public_key, .. } = tag {\n    |                ^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `PublicKey` implemented for `nostr::Tag`, you could use the fully-qualified path\n    |\n258 -         if let Tag::PublicKey { public_key, .. } = tag {\n258 +         if let <nostr::Tag as Example>::PublicKey { public_key, .. } = tag {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `PublicKey` implemented for `nostr::Tag`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":11037,"byte_start":11023,"column_end":30,"column_start":16,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":258,"line_start":258,"suggested_replacement":"<nostr::Tag as Example>::PublicKey","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":30,"highlight_start":16,"text":"        if let Tag::PublicKey { public_key, .. } = tag {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":11037,"byte_start":11023,"column_end":30,"column_start":16,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":258,"line_start":258,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":16,"text":"        if let Tag::PublicKey { public_key, .. } = tag {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> src/nostr_client.rs:274:24\n    |\n274 |                 if let Tag::PublicKey { public_key, .. } = tag {\n    |                        ^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `PublicKey` implemented for `nostr::Tag`, you could use the fully-qualified path\n    |\n274 -                 if let Tag::PublicKey { public_key, .. } = tag {\n274 +                 if let <nostr::Tag as Example>::PublicKey { public_key, .. } = tag {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `PublicKey` implemented for `nostr::Tag`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":11561,"byte_start":11547,"column_end":38,"column_start":24,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":274,"line_start":274,"suggested_replacement":"<nostr::Tag as Example>::PublicKey","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":38,"highlight_start":24,"text":"                if let Tag::PublicKey { public_key, .. } = tag {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":11561,"byte_start":11547,"column_end":38,"column_start":24,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":274,"line_start":274,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":24,"text":"                if let Tag::PublicKey { public_key, .. } = tag {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> src/nostr_client.rs:286:17\n    |\n286 |     let event = EventBuilder::new(Kind::ContactList, \"\", current_tags).to_event(keys)?;\n    |                 ^^^^^^^^^^^^^^^^^                        ------------ unexpected argument #3\n    |\nnote: associated function defined here\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/builder.rs:174:12\n    |\n174 |     pub fn new<S>(kind: Kind, content: S) -> Self\n    |            ^^^\nhelp: remove the extra argument\n    |\n286 -     let event = EventBuilder::new(Kind::ContactList, \"\", current_tags).to_event(keys)?;\n286 +     let event = EventBuilder::new(Kind::ContactList, \"\").to_event(keys)?;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":4566,"byte_start":4563,"column_end":15,"column_start":12,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/builder.rs","is_primary":true,"label":null,"line_end":174,"line_start":174,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new<S>(kind: Kind, content: S) -> Self"}]}]},{"children":[],"code":null,"level":"help","message":"remove the extra argument","rendered":null,"spans":[{"byte_end":11988,"byte_start":11974,"column_end":70,"column_start":56,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":286,"line_start":286,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":70,"highlight_start":56,"text":"    let event = EventBuilder::new(Kind::ContactList, \"\", current_tags).to_event(keys)?;"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 2 arguments but 3 arguments were supplied","spans":[{"byte_end":11988,"byte_start":11976,"column_end":70,"column_start":58,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":false,"label":"unexpected argument #3","line_end":286,"line_start":286,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":58,"text":"    let event = EventBuilder::new(Kind::ContactList, \"\", current_tags).to_event(keys)?;"}]},{"byte_end":11952,"byte_start":11935,"column_end":34,"column_start":17,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":null,"line_end":286,"line_start":286,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":17,"text":"    let event = EventBuilder::new(Kind::ContactList, \"\", current_tags).to_event(keys)?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `to_event` found for struct `nostr::EventBuilder` in the current scope\n   --> src/nostr_client.rs:286:72\n    |\n286 |     let event = EventBuilder::new(Kind::ContactList, \"\", current_tags).to_event(keys)?;\n    |                                                                        ^^^^^^^^ method not found in `EventBuilder`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `to_event` found for struct `nostr::EventBuilder` in the current scope","spans":[{"byte_end":11998,"byte_start":11990,"column_end":80,"column_start":72,"expansion":null,"file_name":"src/nostr_client.rs","is_primary":true,"label":"method not found in `EventBuilder`","line_end":286,"line_start":286,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":72,"text":"    let event = EventBuilder::new(Kind::ContactList, \"\", current_tags).to_event(keys)?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/ui.rs:600:56\n    |\n600 | ...                   if let Err(_e) = client.shutdown().await {\n    |                              ^^^^^^^   ----------------------- this expression has type `()`\n    |                              |\n    |                              expected `()`, found `Result<_, _>`\n    |\n    = note: expected unit type `()`\n                    found enum `Result<_, _>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected unit type `()`\n        found enum `Result<_, _>`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":30814,"byte_start":30807,"column_end":63,"column_start":56,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"expected `()`, found `Result<_, _>`","line_end":600,"line_start":600,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":56,"text":"                                                if let Err(_e) = client.shutdown().await {"}]},{"byte_end":30840,"byte_start":30817,"column_end":89,"column_start":66,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":"this expression has type `()`","line_end":600,"line_start":600,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":89,"highlight_start":66,"text":"                                                if let Err(_e) = client.shutdown().await {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `is_err` found for reference `&nostr::SecretKey` in the current scope\n   --> src/ui.rs:651:84\n    |\n651 | ...                   if user_provided_keys.secret_key().is_err() { return Err(\"Invalid secret key\".into()); }\n    |                                                          ^^^^^^ method not found in `&SecretKey`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `is_err` found for reference `&nostr::SecretKey` in the current scope","spans":[{"byte_end":34614,"byte_start":34608,"column_end":90,"column_start":84,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"method not found in `&SecretKey`","line_end":651,"line_start":651,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":90,"highlight_start":84,"text":"                                                if user_provided_keys.secret_key().is_err() { return Err(\"Invalid secret key\".into()); }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> src/ui.rs:659:71\n    |\n659 | ...                   let plaintext_bytes = user_provided_keys.secret_key()?.to_secret_bytes();\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `&nostr::SecretKey`\n    |\n    = help: the trait `Try` is not implemented for `&nostr::SecretKey`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Try` is not implemented for `&nostr::SecretKey`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the `?` operator can only be applied to values that implement `Try`","spans":[{"byte_end":35459,"byte_start":35427,"column_end":103,"column_start":71,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":35459,"byte_start":35427,"column_end":103,"column_start":71,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":null,"line_end":659,"line_start":659,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":103,"highlight_start":71,"text":"                                                let plaintext_bytes = user_provided_keys.secret_key()?.to_secret_bytes();"}]}},"file_name":"src/ui.rs","is_primary":true,"label":"the `?` operator cannot be applied to type `&nostr::SecretKey`","line_end":659,"line_start":659,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":103,"highlight_start":71,"text":"                                                let plaintext_bytes = user_provided_keys.secret_key()?.to_secret_bytes();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/ui.rs:714:56\n    |\n714 | ...                   if let Err(shutdown_err) = client.shutdown().await {\n    |                              ^^^^^^^^^^^^^^^^^   ----------------------- this expression has type `()`\n    |                              |\n    |                              expected `()`, found `Result<_, _>`\n    |\n    = note: expected unit type `()`\n                    found enum `Result<_, _>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected unit type `()`\n        found enum `Result<_, _>`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":40724,"byte_start":40707,"column_end":73,"column_start":56,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"expected `()`, found `Result<_, _>`","line_end":714,"line_start":714,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":56,"text":"                                                if let Err(shutdown_err) = client.shutdown().await {"}]},{"byte_end":40750,"byte_start":40727,"column_end":99,"column_start":76,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":"this expression has type `()`","line_end":714,"line_start":714,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":99,"highlight_start":76,"text":"                                                if let Err(shutdown_err) = client.shutdown().await {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `ParameterizedReplaceable` found for enum `nostr::Kind` in the current scope\n   --> src/ui.rs:772:93\n    |\n772 | ...   let event = EventBuilder::new(Kind::ParameterizedReplaceable(30315), status_message.clone(), vec![Tag::Identifier(d_tag_value)]).to...\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `Kind`\n    |\nnote: if you're trying to build a new `nostr::Kind`, consider using `nostr::Kind::from_u16` which returns `nostr::Kind`\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/kind.rs:197:5\n    |\n197 |     pub fn from_u16(kind: u16) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: there is a method `is_replaceable` with a similar name, but with different arguments\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/kind.rs:231:5\n    |\n231 |     pub fn is_replaceable(&self) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `nostr::Kind`, consider using `nostr::Kind::from_u16` which returns `nostr::Kind`","rendered":null,"spans":[{"byte_end":12508,"byte_start":12474,"column_end":39,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/kind.rs","is_primary":true,"label":null,"line_end":197,"line_start":197,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":5,"text":"    pub fn from_u16(kind: u16) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"there is a method `is_replaceable` with a similar name, but with different arguments","rendered":null,"spans":[{"byte_end":13493,"byte_start":13457,"column_end":41,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/kind.rs","is_primary":true,"label":null,"line_end":231,"line_start":231,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":5,"text":"    pub fn is_replaceable(&self) -> bool {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `ParameterizedReplaceable` found for enum `nostr::Kind` in the current scope","spans":[{"byte_end":45037,"byte_start":45013,"column_end":117,"column_start":93,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"variant or associated item not found in `Kind`","line_end":772,"line_start":772,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":117,"highlight_start":93,"text":"                                                        let event = EventBuilder::new(Kind::ParameterizedReplaceable(30315), status_message.clone(), vec![Tag::Identifier(d_tag_value)]).to_event(&keys_clone_nip38_send);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no associated item named `Identifier` found for struct `nostr::Tag` in the current scope\n   --> src/ui.rs:772:160\n    |\n772 | ...0315), status_message.clone(), vec![Tag::Identifier(d_tag_value)]).to_event(&keys_clone_nip38_send);\n    |                                             ^^^^^^^^^^ associated item not found in `nostr::Tag`\n    |\nnote: if you're trying to build a new `nostr::Tag` consider using one of the following associated functions:\n      nostr::Tag::parse\n      nostr::Tag::from_standardized\n      nostr::Tag::from_standardized_without_cell\n      nostr::Tag::event\n      and 20 others\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs:106:5\n    |\n106 | /     pub fn parse<I, S>(tag: I) -> Result<Self, Error>\n107 | |     where\n108 | |         I: IntoIterator<Item = S>,\n109 | |         S: Into<String>,\n    | |________________________^\n...\n125 |       pub fn from_standardized(standardized: TagStandard) -> Self {\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n131 |       pub fn from_standardized_without_cell(standardized: TagStandard) -> Self {\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n288 |       pub fn event(event_id: EventId) -> Self {\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: there is an associated function `identifier` with a similar name (notice the capitalization difference)\n    |\n772 -                                                         let event = EventBuilder::new(Kind::ParameterizedReplaceable(30315), status_message.clone(), vec![Tag::Identifier(d_tag_value)]).to_event(&keys_clone_nip38_send);\n772 +                                                         let event = EventBuilder::new(Kind::ParameterizedReplaceable(30315), status_message.clone(), vec![Tag::identifier(d_tag_value)]).to_event(&keys_clone_nip38_send);\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `nostr::Tag` consider using one of the following associated functions:\nnostr::Tag::parse\nnostr::Tag::from_standardized\nnostr::Tag::from_standardized_without_cell\nnostr::Tag::event\nand 20 others","rendered":null,"spans":[{"byte_end":2485,"byte_start":2366,"column_end":25,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs","is_primary":true,"label":null,"line_end":109,"line_start":106,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":5,"text":"    pub fn parse<I, S>(tag: I) -> Result<Self, Error>"},{"highlight_end":10,"highlight_start":1,"text":"    where"},{"highlight_end":35,"highlight_start":1,"text":"        I: IntoIterator<Item = S>,"},{"highlight_end":25,"highlight_start":1,"text":"        S: Into<String>,"}]},{"byte_end":2909,"byte_start":2850,"column_end":64,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs","is_primary":true,"label":null,"line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":5,"text":"    pub fn from_standardized(standardized: TagStandard) -> Self {"}]},{"byte_end":3158,"byte_start":3086,"column_end":77,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs","is_primary":true,"label":null,"line_end":131,"line_start":131,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":77,"highlight_start":5,"text":"    pub fn from_standardized_without_cell(standardized: TagStandard) -> Self {"}]},{"byte_end":7365,"byte_start":7326,"column_end":44,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs","is_primary":true,"label":null,"line_end":288,"line_start":288,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":5,"text":"    pub fn event(event_id: EventId) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"there is an associated function `identifier` with a similar name","rendered":null,"spans":[{"byte_end":45090,"byte_start":45080,"column_end":170,"column_start":160,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":772,"line_start":772,"suggested_replacement":"identifier","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":170,"highlight_start":160,"text":"                                                        let event = EventBuilder::new(Kind::ParameterizedReplaceable(30315), status_message.clone(), vec![Tag::Identifier(d_tag_value)]).to_event(&keys_clone_nip38_send);"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no associated item named `Identifier` found for struct `nostr::Tag` in the current scope","spans":[{"byte_end":45090,"byte_start":45080,"column_end":170,"column_start":160,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"associated item not found in `nostr::Tag`","line_end":772,"line_start":772,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":170,"highlight_start":160,"text":"                                                        let event = EventBuilder::new(Kind::ParameterizedReplaceable(30315), status_message.clone(), vec![Tag::Identifier(d_tag_value)]).to_event(&keys_clone_nip38_send);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> src/ui.rs:772:69\n    |\n772 | ...vent = EventBuilder::new(Kind::ParameterizedReplaceable(30315), status_message.clone(), vec![Tag::Identifier(d_tag_value)]).to_event(&...\n    |           ^^^^^^^^^^^^^^^^^                                                                ---------------------------------- unexpected argument #3\n    |\nnote: associated function defined here\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/builder.rs:174:12\n    |\n174 |     pub fn new<S>(kind: Kind, content: S) -> Self\n    |            ^^^\nhelp: remove the extra argument\n    |\n772 -                                                         let event = EventBuilder::new(Kind::ParameterizedReplaceable(30315), status_message.clone(), vec![Tag::Identifier(d_tag_value)]).to_event(&keys_clone_nip38_send);\n772 +                                                         let event = EventBuilder::new(Kind::ParameterizedReplaceable(30315), status_message.clone()).to_event(&keys_clone_nip38_send);\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":4566,"byte_start":4563,"column_end":15,"column_start":12,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/builder.rs","is_primary":true,"label":null,"line_end":174,"line_start":174,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new<S>(kind: Kind, content: S) -> Self"}]}]},{"children":[],"code":null,"level":"help","message":"remove the extra argument","rendered":null,"spans":[{"byte_end":45104,"byte_start":45068,"column_end":184,"column_start":148,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":772,"line_start":772,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":184,"highlight_start":148,"text":"                                                        let event = EventBuilder::new(Kind::ParameterizedReplaceable(30315), status_message.clone(), vec![Tag::Identifier(d_tag_value)]).to_event(&keys_clone_nip38_send);"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 2 arguments but 3 arguments were supplied","spans":[{"byte_end":45104,"byte_start":45070,"column_end":184,"column_start":150,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":"unexpected argument #3","line_end":772,"line_start":772,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":184,"highlight_start":150,"text":"                                                        let event = EventBuilder::new(Kind::ParameterizedReplaceable(30315), status_message.clone(), vec![Tag::Identifier(d_tag_value)]).to_event(&keys_clone_nip38_send);"}]},{"byte_end":45006,"byte_start":44989,"column_end":86,"column_start":69,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":772,"line_start":772,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":86,"highlight_start":69,"text":"                                                        let event = EventBuilder::new(Kind::ParameterizedReplaceable(30315), status_message.clone(), vec![Tag::Identifier(d_tag_value)]).to_event(&keys_clone_nip38_send);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `to_event` found for struct `nostr::EventBuilder` in the current scope\n   --> src/ui.rs:772:186\n    |\n772 | ...clone(), vec![Tag::Identifier(d_tag_value)]).to_event(&keys_clone_nip38_send);\n    |                                                 ^^^^^^^^ method not found in `EventBuilder`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `to_event` found for struct `nostr::EventBuilder` in the current scope","spans":[{"byte_end":45114,"byte_start":45106,"column_end":194,"column_start":186,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"method not found in `EventBuilder`","line_end":772,"line_start":772,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":194,"highlight_start":186,"text":"                                                        let event = EventBuilder::new(Kind::ParameterizedReplaceable(30315), status_message.clone(), vec![Tag::Identifier(d_tag_value)]).to_event(&keys_clone_nip38_send);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: `nostr_sdk::nostr_relay_pool::Output<nostr::EventId>` doesn't implement `std::fmt::Display`\n   --> src/ui.rs:776:116\n    |\n776 | ...                   println!(\"Status published with event id: {}\", event_id);\n    |                                                                      ^^^^^^^^ `nostr_sdk::nostr_relay_pool::Output<nostr::EventId>` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `nostr_sdk::nostr_relay_pool::Output<nostr::EventId>`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `std::fmt::Display` is not implemented for `nostr_sdk::nostr_relay_pool::Output<nostr::EventId>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`nostr_sdk::nostr_relay_pool::Output<nostr::EventId>` doesn't implement `std::fmt::Display`","spans":[{"byte_end":45544,"byte_start":45536,"column_end":124,"column_start":116,"expansion":{"def_site_span":{"byte_end":36029,"byte_start":36002,"column_end":32,"column_start":5,"expansion":null,"file_name":"/rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/core/src/macros/mod.rs","is_primary":false,"label":null,"line_end":1033,"line_start":1033,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"$crate::format_args_nl!","span":{"byte_end":4440,"byte_start":4407,"column_end":61,"column_start":28,"expansion":{"def_site_span":{"byte_end":4305,"byte_start":4285,"column_end":21,"column_start":1,"expansion":null,"file_name":"/rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/std/src/macros.rs","is_primary":false,"label":null,"line_end":138,"line_start":138,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"println!","span":{"byte_end":45545,"byte_start":45489,"column_end":125,"column_start":69,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":null,"line_end":776,"line_start":776,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":125,"highlight_start":69,"text":"                                                                    println!(\"Status published with event id: {}\", event_id);"}]}},"file_name":"/rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/std/src/macros.rs","is_primary":false,"label":null,"line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}},"file_name":"src/ui.rs","is_primary":true,"label":"`nostr_sdk::nostr_relay_pool::Output<nostr::EventId>` cannot be formatted with the default formatter","line_end":776,"line_start":776,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":124,"highlight_start":116,"text":"                                                                    println!(\"Status published with event id: {}\", event_id);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> src/ui.rs:838:45\n    |\n838 | ...                   discover_client.shutdown().await?;\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Try` is not implemented for `()`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the `?` operator can only be applied to values that implement `Try`","spans":[{"byte_end":50169,"byte_start":50136,"column_end":78,"column_start":45,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":50169,"byte_start":50136,"column_end":78,"column_start":45,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":null,"line_end":838,"line_start":838,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":45,"text":"                                            discover_client.shutdown().await?;"}]}},"file_name":"src/ui.rs","is_primary":true,"label":"the `?` operator cannot be applied to type `()`","line_end":838,"line_start":838,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":45,"text":"                                            discover_client.shutdown().await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `ParameterizedReplaceable` found for enum `nostr::Kind` in the current scope\n   --> src/ui.rs:853:118\n    |\n853 | ...                   let timeline_filter = Filter::new().authors(followed_pubkeys).kind(Kind::ParameterizedReplaceable(30315)).limit(20);\n    |                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `Kind`\n    |\nnote: if you're trying to build a new `nostr::Kind`, consider using `nostr::Kind::from_u16` which returns `nostr::Kind`\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/kind.rs:197:5\n    |\n197 |     pub fn from_u16(kind: u16) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: there is a method `is_replaceable` with a similar name, but with different arguments\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/kind.rs:231:5\n    |\n231 |     pub fn is_replaceable(&self) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `nostr::Kind`, consider using `nostr::Kind::from_u16` which returns `nostr::Kind`","rendered":null,"spans":[{"byte_end":12508,"byte_start":12474,"column_end":39,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/kind.rs","is_primary":true,"label":null,"line_end":197,"line_start":197,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":5,"text":"    pub fn from_u16(kind: u16) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"there is a method `is_replaceable` with a similar name, but with different arguments","rendered":null,"spans":[{"byte_end":13493,"byte_start":13457,"column_end":41,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/kind.rs","is_primary":true,"label":null,"line_end":231,"line_start":231,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":5,"text":"    pub fn is_replaceable(&self) -> bool {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `ParameterizedReplaceable` found for enum `nostr::Kind` in the current scope","spans":[{"byte_end":51229,"byte_start":51205,"column_end":142,"column_start":118,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"variant or associated item not found in `Kind`","line_end":853,"line_start":853,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":142,"highlight_start":118,"text":"                                            let timeline_filter = Filter::new().authors(followed_pubkeys).kind(Kind::ParameterizedReplaceable(30315)).limit(20);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `get_events_of` found for struct `nostr_sdk::Client` in the current scope\n   --> src/ui.rs:854:77\n    |\n854 | ...                   let status_events = temp_client.get_events_of(vec![timeline_filter], Some(Duration::from_secs(10))).await?;\n    |                                                       ^^^^^^^^^^^^^\n    |\nhelp: there is a method `fetch_events_from` with a similar name, but with different arguments\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs:770:5\n    |\n770 | /     pub async fn fetch_events_from<I, U>(\n771 | |         &self,\n772 | |         urls: I,\n773 | |         filter: Filter,\n...   |\n778 | |         U: TryIntoUrl,\n779 | |         pool::Error: From<<U as TryIntoUrl>::Err>,\n    | |__________________________________________________^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is a method `fetch_events_from` with a similar name, but with different arguments","rendered":null,"spans":[{"byte_end":25781,"byte_start":25511,"column_end":51,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs","is_primary":true,"label":null,"line_end":779,"line_start":770,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":5,"text":"    pub async fn fetch_events_from<I, U>("},{"highlight_end":15,"highlight_start":1,"text":"        &self,"},{"highlight_end":17,"highlight_start":1,"text":"        urls: I,"},{"highlight_end":24,"highlight_start":1,"text":"        filter: Filter,"},{"highlight_end":27,"highlight_start":1,"text":"        timeout: Duration,"},{"highlight_end":31,"highlight_start":1,"text":"    ) -> Result<Events, Error>"},{"highlight_end":10,"highlight_start":1,"text":"    where"},{"highlight_end":35,"highlight_start":1,"text":"        I: IntoIterator<Item = U>,"},{"highlight_end":23,"highlight_start":1,"text":"        U: TryIntoUrl,"},{"highlight_end":51,"highlight_start":1,"text":"        pool::Error: From<<U as TryIntoUrl>::Err>,"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `get_events_of` found for struct `nostr_sdk::Client` in the current scope","spans":[{"byte_end":51338,"byte_start":51325,"column_end":90,"column_start":77,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":854,"line_start":854,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":90,"highlight_start":77,"text":"                                            let status_events = temp_client.get_events_of(vec![timeline_filter], Some(Duration::from_secs(10))).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `get_events_of` found for struct `nostr_sdk::Client` in the current scope\n   --> src/ui.rs:863:83\n    |\n863 | ...                   let metadata_events = temp_client.get_events_of(vec![metadata_filter], Some(Duration::from_secs(5))).await?;\n    |                                                         ^^^^^^^^^^^^^\n    |\nhelp: there is a method `fetch_events_from` with a similar name, but with different arguments\n   --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs:770:5\n    |\n770 | /     pub async fn fetch_events_from<I, U>(\n771 | |         &self,\n772 | |         urls: I,\n773 | |         filter: Filter,\n...   |\n778 | |         U: TryIntoUrl,\n779 | |         pool::Error: From<<U as TryIntoUrl>::Err>,\n    | |__________________________________________________^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is a method `fetch_events_from` with a similar name, but with different arguments","rendered":null,"spans":[{"byte_end":25781,"byte_start":25511,"column_end":51,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-sdk-0.43.0/src/client/mod.rs","is_primary":true,"label":null,"line_end":779,"line_start":770,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":5,"text":"    pub async fn fetch_events_from<I, U>("},{"highlight_end":15,"highlight_start":1,"text":"        &self,"},{"highlight_end":17,"highlight_start":1,"text":"        urls: I,"},{"highlight_end":24,"highlight_start":1,"text":"        filter: Filter,"},{"highlight_end":27,"highlight_start":1,"text":"        timeout: Duration,"},{"highlight_end":31,"highlight_start":1,"text":"    ) -> Result<Events, Error>"},{"highlight_end":10,"highlight_start":1,"text":"    where"},{"highlight_end":35,"highlight_start":1,"text":"        I: IntoIterator<Item = U>,"},{"highlight_end":23,"highlight_start":1,"text":"        U: TryIntoUrl,"},{"highlight_end":51,"highlight_start":1,"text":"        pool::Error: From<<U as TryIntoUrl>::Err>,"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `get_events_of` found for struct `nostr_sdk::Client` in the current scope","spans":[{"byte_end":52301,"byte_start":52288,"column_end":96,"column_start":83,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":863,"line_start":863,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":96,"highlight_start":83,"text":"                                                let metadata_events = temp_client.get_events_of(vec![metadata_filter], Some(Duration::from_secs(5))).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> src/ui.rs:876:64\n    |\n876 | ...                   if let Tag::Emoji { shortcode, url } = tag {\n    |                              ^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Emoji` implemented for `nostr::Tag`, you could use the fully-qualified path\n    |\n876 -                                                         if let Tag::Emoji { shortcode, url } = tag {\n876 +                                                         if let <nostr::Tag as Example>::Emoji { shortcode, url } = tag {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Emoji` implemented for `nostr::Tag`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":53347,"byte_start":53337,"column_end":74,"column_start":64,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":876,"line_start":876,"suggested_replacement":"<nostr::Tag as Example>::Emoji","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":74,"highlight_start":64,"text":"                                                        if let Tag::Emoji { shortcode, url } = tag {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":53347,"byte_start":53337,"column_end":74,"column_start":64,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":876,"line_start":876,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":74,"highlight_start":64,"text":"                                                        if let Tag::Emoji { shortcode, url } = tag {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> src/ui.rs:893:45\n    |\n893 | ...                   temp_client.shutdown().await?;\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Try` is not implemented for `()`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the `?` operator can only be applied to values that implement `Try`","spans":[{"byte_end":54598,"byte_start":54569,"column_end":74,"column_start":45,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":54598,"byte_start":54569,"column_end":74,"column_start":45,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":null,"line_end":893,"line_start":893,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":74,"highlight_start":45,"text":"                                            temp_client.shutdown().await?;"}]}},"file_name":"src/ui.rs","is_primary":true,"label":"the `?` operator cannot be applied to type `()`","line_end":893,"line_start":893,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":74,"highlight_start":45,"text":"                                            temp_client.shutdown().await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `as_i64` found for struct `nostr::Timestamp` in the current scope\n   --> src/ui.rs:979:132\n    |\n979 | ...                   let created_at_datetime = chrono::DateTime::from_timestamp(post.created_at.as_i64(), 0).unwrap();\n    |                                                                                                  ^^^^^^\n    |\nhelp: there is a method `as_u64` with a similar name\n    |\n979 -                                                         let created_at_datetime = chrono::DateTime::from_timestamp(post.created_at.as_i64(), 0).unwrap();\n979 +                                                         let created_at_datetime = chrono::DateTime::from_timestamp(post.created_at.as_u64(), 0).unwrap();\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is a method `as_u64` with a similar name","rendered":null,"spans":[{"byte_end":61809,"byte_start":61803,"column_end":138,"column_start":132,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":979,"line_start":979,"suggested_replacement":"as_u64","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":138,"highlight_start":132,"text":"                                                        let created_at_datetime = chrono::DateTime::from_timestamp(post.created_at.as_i64(), 0).unwrap();"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `as_i64` found for struct `nostr::Timestamp` in the current scope","spans":[{"byte_end":61809,"byte_start":61803,"column_end":138,"column_start":132,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":979,"line_start":979,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":138,"highlight_start":132,"text":"                                                        let created_at_datetime = chrono::DateTime::from_timestamp(post.created_at.as_i64(), 0).unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no associated item named `RelayMetadata` found for struct `nostr::Tag` in the current scope\n    --> src/ui.rs:1229:67\n     |\n1229 | ...                   Some(Tag::RelayMetadata(relay.url.clone().into(), policy))\n     |                                 ^^^^^^^^^^^^^ associated item not found in `nostr::Tag`\n     |\nnote: if you're trying to build a new `nostr::Tag` consider using one of the following associated functions:\n      nostr::Tag::parse\n      nostr::Tag::from_standardized\n      nostr::Tag::from_standardized_without_cell\n      nostr::Tag::event\n      and 20 others\n    --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs:106:5\n     |\n106  | /     pub fn parse<I, S>(tag: I) -> Result<Self, Error>\n107  | |     where\n108  | |         I: IntoIterator<Item = S>,\n109  | |         S: Into<String>,\n     | |________________________^\n...\n125  |       pub fn from_standardized(standardized: TagStandard) -> Self {\n     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n131  |       pub fn from_standardized_without_cell(standardized: TagStandard) -> Self {\n     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n288  |       pub fn event(event_id: EventId) -> Self {\n     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: there is an associated function `relay_metadata` with a similar name\n     |\n1229 -                                                         Some(Tag::RelayMetadata(relay.url.clone().into(), policy))\n1229 +                                                         Some(Tag::relay_metadata(relay.url.clone().into(), policy))\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `nostr::Tag` consider using one of the following associated functions:\nnostr::Tag::parse\nnostr::Tag::from_standardized\nnostr::Tag::from_standardized_without_cell\nnostr::Tag::event\nand 20 others","rendered":null,"spans":[{"byte_end":2485,"byte_start":2366,"column_end":25,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs","is_primary":true,"label":null,"line_end":109,"line_start":106,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":5,"text":"    pub fn parse<I, S>(tag: I) -> Result<Self, Error>"},{"highlight_end":10,"highlight_start":1,"text":"    where"},{"highlight_end":35,"highlight_start":1,"text":"        I: IntoIterator<Item = S>,"},{"highlight_end":25,"highlight_start":1,"text":"        S: Into<String>,"}]},{"byte_end":2909,"byte_start":2850,"column_end":64,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs","is_primary":true,"label":null,"line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":5,"text":"    pub fn from_standardized(standardized: TagStandard) -> Self {"}]},{"byte_end":3158,"byte_start":3086,"column_end":77,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs","is_primary":true,"label":null,"line_end":131,"line_start":131,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":77,"highlight_start":5,"text":"    pub fn from_standardized_without_cell(standardized: TagStandard) -> Self {"}]},{"byte_end":7365,"byte_start":7326,"column_end":44,"column_start":5,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/tag/mod.rs","is_primary":true,"label":null,"line_end":288,"line_start":288,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":5,"text":"    pub fn event(event_id: EventId) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"there is an associated function `relay_metadata` with a similar name","rendered":null,"spans":[{"byte_end":80078,"byte_start":80065,"column_end":80,"column_start":67,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":1229,"line_start":1229,"suggested_replacement":"relay_metadata","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":80,"highlight_start":67,"text":"                                                        Some(Tag::RelayMetadata(relay.url.clone().into(), policy))"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no associated item named `RelayMetadata` found for struct `nostr::Tag` in the current scope","spans":[{"byte_end":80078,"byte_start":80065,"column_end":80,"column_start":67,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"associated item not found in `nostr::Tag`","line_end":1229,"line_start":1229,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":67,"text":"                                                        Some(Tag::RelayMetadata(relay.url.clone().into(), policy))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n    --> src/ui.rs:1237:61\n     |\n1237 | ...                   let event = EventBuilder::new(Kind::RelayList, \"\", tags).to_event(&keys)?;\n     |                                   ^^^^^^^^^^^^^^^^^                      ---- unexpected argument #3 of type `std::vec::Vec<nostr::Tag>`\n     |\nnote: associated function defined here\n    --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/builder.rs:174:12\n     |\n174  |     pub fn new<S>(kind: Kind, content: S) -> Self\n     |            ^^^\nhelp: remove the extra argument\n     |\n1237 -                                                 let event = EventBuilder::new(Kind::RelayList, \"\", tags).to_event(&keys)?;\n1237 +                                                 let event = EventBuilder::new(Kind::RelayList, \"\").to_event(&keys)?;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":4566,"byte_start":4563,"column_end":15,"column_start":12,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/builder.rs","is_primary":true,"label":null,"line_end":174,"line_start":174,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new<S>(kind: Kind, content: S) -> Self"}]}]},{"children":[],"code":null,"level":"help","message":"remove the extra argument","rendered":null,"spans":[{"byte_end":80572,"byte_start":80566,"column_end":104,"column_start":98,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":1237,"line_start":1237,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":104,"highlight_start":98,"text":"                                                let event = EventBuilder::new(Kind::RelayList, \"\", tags).to_event(&keys)?;"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 2 arguments but 3 arguments were supplied","spans":[{"byte_end":80572,"byte_start":80568,"column_end":104,"column_start":100,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":"unexpected argument #3 of type `std::vec::Vec<nostr::Tag>`","line_end":1237,"line_start":1237,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":104,"highlight_start":100,"text":"                                                let event = EventBuilder::new(Kind::RelayList, \"\", tags).to_event(&keys)?;"}]},{"byte_end":80546,"byte_start":80529,"column_end":78,"column_start":61,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":1237,"line_start":1237,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":61,"text":"                                                let event = EventBuilder::new(Kind::RelayList, \"\", tags).to_event(&keys)?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `to_event` found for struct `nostr::EventBuilder` in the current scope\n    --> src/ui.rs:1237:106\n     |\n1237 | ...                   let event = EventBuilder::new(Kind::RelayList, \"\", tags).to_event(&keys)?;\n     |                                                                                ^^^^^^^^ method not found in `EventBuilder`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `to_event` found for struct `nostr::EventBuilder` in the current scope","spans":[{"byte_end":80582,"byte_start":80574,"column_end":114,"column_start":106,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"method not found in `EventBuilder`","line_end":1237,"line_start":1237,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":114,"highlight_start":106,"text":"                                                let event = EventBuilder::new(Kind::RelayList, \"\", tags).to_event(&keys)?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `timeout` found for struct `ClientOptions` in the current scope\n    --> src/ui.rs:1240:76\n     |\n1240 | ...                   let opts = Options::new().timeout(Some(Duration::from_secs(20)));\n     |                                                 ^^^^^^^ method not found in `ClientOptions`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `timeout` found for struct `ClientOptions` in the current scope","spans":[{"byte_end":80780,"byte_start":80773,"column_end":83,"column_start":76,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"method not found in `ClientOptions`","line_end":1240,"line_start":1240,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":83,"highlight_start":76,"text":"                                                 let opts = Options::new().timeout(Some(Duration::from_secs(20)));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: `nostr_sdk::nostr_relay_pool::Output<nostr::EventId>` doesn't implement `std::fmt::Display`\n    --> src/ui.rs:1251:109\n     |\n1251 | ...                   println!(\"NIP-65 list published with event id: {}\", event_id);\n     |                                                                           ^^^^^^^^ `nostr_sdk::nostr_relay_pool::Output<nostr::EventId>` cannot be formatted with the default formatter\n     |\n     = help: the trait `std::fmt::Display` is not implemented for `nostr_sdk::nostr_relay_pool::Output<nostr::EventId>`\n     = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n     = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `std::fmt::Display` is not implemented for `nostr_sdk::nostr_relay_pool::Output<nostr::EventId>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`nostr_sdk::nostr_relay_pool::Output<nostr::EventId>` doesn't implement `std::fmt::Display`","spans":[{"byte_end":81615,"byte_start":81607,"column_end":117,"column_start":109,"expansion":{"def_site_span":{"byte_end":36029,"byte_start":36002,"column_end":32,"column_start":5,"expansion":null,"file_name":"/rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/core/src/macros/mod.rs","is_primary":false,"label":null,"line_end":1033,"line_start":1033,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"$crate::format_args_nl!","span":{"byte_end":4440,"byte_start":4407,"column_end":61,"column_start":28,"expansion":{"def_site_span":{"byte_end":4305,"byte_start":4285,"column_end":21,"column_start":1,"expansion":null,"file_name":"/rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/std/src/macros.rs","is_primary":false,"label":null,"line_end":138,"line_start":138,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"println!","span":{"byte_end":81616,"byte_start":81555,"column_end":118,"column_start":57,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":null,"line_end":1251,"line_start":1251,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":118,"highlight_start":57,"text":"                                                        println!(\"NIP-65 list published with event id: {}\", event_id);"}]}},"file_name":"/rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/std/src/macros.rs","is_primary":false,"label":null,"line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}},"file_name":"src/ui.rs","is_primary":true,"label":"`nostr_sdk::nostr_relay_pool::Output<nostr::EventId>` cannot be formatted with the default formatter","line_end":1251,"line_start":1251,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":117,"highlight_start":109,"text":"                                                        println!(\"NIP-65 list published with event id: {}\", event_id);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the `?` operator can only be applied to values that implement `Try`\n    --> src/ui.rs:1253:49\n     |\n1253 | ...                   discover_client.shutdown().await?;\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `()`\n     |\n     = help: the trait `Try` is not implemented for `()`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Try` is not implemented for `()`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the `?` operator can only be applied to values that implement `Try`","spans":[{"byte_end":81700,"byte_start":81667,"column_end":82,"column_start":49,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":81700,"byte_start":81667,"column_end":82,"column_start":49,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":null,"line_end":1253,"line_start":1253,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":82,"highlight_start":49,"text":"                                                discover_client.shutdown().await?;"}]}},"file_name":"src/ui.rs","is_primary":true,"label":"the `?` operator cannot be applied to type `()`","line_end":1253,"line_start":1253,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":82,"highlight_start":49,"text":"                                                discover_client.shutdown().await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n    --> src/ui.rs:1350:61\n     |\n1350 | ...                   let event = EventBuilder::new(Kind::Metadata, profile_content.clone(), vec![]).to_event(&keys_clone)?;\n     |                                   ^^^^^^^^^^^^^^^^^                                          ------ unexpected argument #3 of type `std::vec::Vec<_>`\n     |\nnote: associated function defined here\n    --> /home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/builder.rs:174:12\n     |\n174  |     pub fn new<S>(kind: Kind, content: S) -> Self\n     |            ^^^\nhelp: remove the extra argument\n     |\n1350 -                                                 let event = EventBuilder::new(Kind::Metadata, profile_content.clone(), vec![]).to_event(&keys_clone)?;\n1350 +                                                 let event = EventBuilder::new(Kind::Metadata, profile_content.clone()).to_event(&keys_clone)?;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":4566,"byte_start":4563,"column_end":15,"column_start":12,"expansion":null,"file_name":"/home/jules/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nostr-0.43.0/src/event/builder.rs","is_primary":true,"label":null,"line_end":174,"line_start":174,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new<S>(kind: Kind, content: S) -> Self"}]}]},{"children":[],"code":null,"level":"help","message":"remove the extra argument","rendered":null,"spans":[{"byte_end":88386,"byte_start":88378,"column_end":126,"column_start":118,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":1350,"line_start":1350,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":126,"highlight_start":118,"text":"                                                let event = EventBuilder::new(Kind::Metadata, profile_content.clone(), vec![]).to_event(&keys_clone)?;"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 2 arguments but 3 arguments were supplied","spans":[{"byte_end":88386,"byte_start":88380,"column_end":126,"column_start":120,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":"unexpected argument #3 of type `std::vec::Vec<_>`","line_end":1350,"line_start":1350,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":126,"highlight_start":120,"text":"                                                let event = EventBuilder::new(Kind::Metadata, profile_content.clone(), vec![]).to_event(&keys_clone)?;"}]},{"byte_end":88338,"byte_start":88321,"column_end":78,"column_start":61,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":null,"line_end":1350,"line_start":1350,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":61,"text":"                                                let event = EventBuilder::new(Kind::Metadata, profile_content.clone(), vec![]).to_event(&keys_clone)?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `to_event` found for struct `nostr::EventBuilder` in the current scope\n    --> src/ui.rs:1350:128\n     |\n1350 | ...                   let event = EventBuilder::new(Kind::Metadata, profile_content.clone(), vec![]).to_event(&keys_clone)?;\n     |                                                                                                      ^^^^^^^^ method not found in `EventBuilder`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `to_event` found for struct `nostr::EventBuilder` in the current scope","spans":[{"byte_end":88396,"byte_start":88388,"column_end":136,"column_start":128,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"method not found in `EventBuilder`","line_end":1350,"line_start":1350,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":136,"highlight_start":128,"text":"                                                let event = EventBuilder::new(Kind::Metadata, profile_content.clone(), vec![]).to_event(&keys_clone)?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: `nostr_sdk::nostr_relay_pool::Output<nostr::EventId>` doesn't implement `std::fmt::Display`\n    --> src/ui.rs:1355:112\n     |\n1355 | ...                   println!(\"NIP-01 profile published with event id: {}\", event_id);\n     |                                                                              ^^^^^^^^ `nostr_sdk::nostr_relay_pool::Output<nostr::EventId>` cannot be formatted with the default formatter\n     |\n     = help: the trait `std::fmt::Display` is not implemented for `nostr_sdk::nostr_relay_pool::Output<nostr::EventId>`\n     = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n     = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `std::fmt::Display` is not implemented for `nostr_sdk::nostr_relay_pool::Output<nostr::EventId>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`nostr_sdk::nostr_relay_pool::Output<nostr::EventId>` doesn't implement `std::fmt::Display`","spans":[{"byte_end":88780,"byte_start":88772,"column_end":120,"column_start":112,"expansion":{"def_site_span":{"byte_end":36029,"byte_start":36002,"column_end":32,"column_start":5,"expansion":null,"file_name":"/rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/core/src/macros/mod.rs","is_primary":false,"label":null,"line_end":1033,"line_start":1033,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"$crate::format_args_nl!","span":{"byte_end":4440,"byte_start":4407,"column_end":61,"column_start":28,"expansion":{"def_site_span":{"byte_end":4305,"byte_start":4285,"column_end":21,"column_start":1,"expansion":null,"file_name":"/rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/std/src/macros.rs","is_primary":false,"label":null,"line_end":138,"line_start":138,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"println!","span":{"byte_end":88781,"byte_start":88717,"column_end":121,"column_start":57,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":null,"line_end":1355,"line_start":1355,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":121,"highlight_start":57,"text":"                                                        println!(\"NIP-01 profile published with event id: {}\", event_id);"}]}},"file_name":"/rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/std/src/macros.rs","is_primary":false,"label":null,"line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}},"file_name":"src/ui.rs","is_primary":true,"label":"`nostr_sdk::nostr_relay_pool::Output<nostr::EventId>` cannot be formatted with the default formatter","line_end":1355,"line_start":1355,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":120,"highlight_start":112,"text":"                                                        println!(\"NIP-01 profile published with event id: {}\", event_id);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n    --> src/ui.rs:1423:56\n     |\n1423 | ...                   if let Err(e) = client.shutdown().await {\n     |                              ^^^^^^   ----------------------- this expression has type `()`\n     |                              |\n     |                              expected `()`, found `Result<_, _>`\n     |\n     = note: expected unit type `()`\n                     found enum `Result<_, _>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected unit type `()`\n        found enum `Result<_, _>`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":94081,"byte_start":94075,"column_end":62,"column_start":56,"expansion":null,"file_name":"src/ui.rs","is_primary":true,"label":"expected `()`, found `Result<_, _>`","line_end":1423,"line_start":1423,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":56,"text":"                                                if let Err(e) = client.shutdown().await {"}]},{"byte_end":94107,"byte_start":94084,"column_end":88,"column_start":65,"expansion":null,"file_name":"src/ui.rs","is_primary":false,"label":"this expression has type `()`","line_end":1423,"line_start":1423,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":88,"highlight_start":65,"text":"                                                if let Err(e) = client.shutdown().await {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0061, E0223, E0277, E0308, E0433, E0599.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0061, E0223, E0277, E0308, E0433, E0599.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///app#N@0.1.0","manifest_path":"/app/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"N","src_path":"/app/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0061`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0061`.","spans":[]}}
{"reason":"build-finished","success":false}
